(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

(* This file was automatically generated: do not edit *********************)

include "Coq.ma".

(*#***********************************************************************)

(*  v      *   The Coq Proof Assistant  /  The Coq Development Team     *)

(* <O___,, * CNRS-Ecole Polytechnique-INRIA Futurs-Universite Paris Sud *)

(*   \VV/  **************************************************************)

(*    //   *      This file is distributed under the terms of the       *)

(*         *       GNU Lesser General Public License Version 2.1        *)

(*#***********************************************************************)

(*i $Id: Bvector.v,v 1.6.2.1 2004/07/16 19:31:03 herbelin Exp $ i*)

(*#* Bit vectors. Contribution by Jean Duprat (ENS Lyon). *)

include "Bool/Bool.ma".

include "Bool/Sumbool.ma".

include "Arith/Arith.ma".

(* UNEXPORTED
Open Local Scope nat_scope.
*)

(*  
On s'inspire de PolyList pour fabriquer les vecteurs de bits.
La dimension du vecteur est un param\232\tre trop important pour
se contenter de la fonction "length".
La premi\232\re id\233\e est de faire un record avec la liste et la longueur.
Malheureusement, cette verification a posteriori amene a faire
de nombreux lemmes pour gerer les longueurs.
La seconde id\233\e est de faire un type d\233\pendant dans lequel la
longueur est un param\232\tre de construction. Cela complique un
peu les inductions structurelles, la solution qui a ma pr\233\f\233\rence
est alors d'utiliser un terme de preuve comme d\233\finition.

(En effet une d\233\finition comme :
Fixpoint Vunaire [n:nat; v:(vector n)]: (vector n) :=
Cases v of
	| Vnil => Vnil
	| (Vcons a p v') => (Vcons (f a) p (Vunaire p v'))
end.
provoque ce message d'erreur :
Coq < Error: Inference of annotation not yet implemented in this case).


	Inductive list [A : Set]  : Set :=
		nil : (list A) | cons : A->(list A)->(list A).
	head = [A:Set; l:(list A)] Cases l of
			| nil => Error
 			| (cons x _) => (Value x)
 			end
     		: (A:Set)(list A)->(option A).
	tail = [A:Set; l:(list A)]Cases l of
                   			| nil => (nil A)
                   			| (cons _ m) => m
                   			end
     		: (A:Set)(list A)->(list A).
	length = [A:Set] Fix length {length [l:(list A)] : nat :=
      		Cases l of
       			| nil => O
      			| (cons _ m) => (S (length m))
      		end}
     		: (A:Set)(list A)->nat.
	map = [A,B:Set; f:(A->B)] Fix map {map [l:(list A)] : (list B) :=
		Cases l of
			| nil => (nil B)
			| (cons a t) => (cons (f a) (map t))
		end}
		: (A,B:Set)(A->B)->(list A)->(list B)
*)

(* UNEXPORTED
Section VECTORS
*)

(* 
Un vecteur est une liste de taille n d'\233\l\233\ments d'un ensemble A.
Si la taille est non nulle, on peut extraire la premi\232\re composante et 
le reste du vecteur, la derni\232\re composante ou rajouter ou enlever 
une composante (carry) ou repeter la derni\232\re composante en fin de vecteur.
On peut aussi tronquer le vecteur de ses p derni\232\res composantes ou
au contraire l'\233\tendre (concat\233\ner) d'un vecteur de longueur p.
Une fonction unaire sur A g\233\n\232\re une fonction des vecteurs de taille n
dans les vecteurs de taille n en appliquant f terme \224\ terme.
Une fonction binaire sur A g\233\n\232\re une fonction des couple de vecteurs 
de taille n dans les vecteurs de taille n en appliquant f terme \224\ terme.
*)

(* UNEXPORTED
cic:/Coq/Bool/Bvector/VECTORS/A.var
*)

inline procedural "cic:/Coq/Bool/Bvector/vector.ind".

inline procedural "cic:/Coq/Bool/Bvector/Vhead.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/Vtail.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/Vlast.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/Vconst.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/Vshiftout.con" as lemma.

inline procedural "cic:/Coq/Bool/Bvector/Vshiftin.con" as lemma.

inline procedural "cic:/Coq/Bool/Bvector/Vshiftrepeat.con" as lemma.

(*
Lemma S_minus_S : (n,p:nat) (gt n (S p)) -> (S (minus n (S p)))=(minus n p).
Proof.
  Intros.
Save.
*)

inline procedural "cic:/Coq/Bool/Bvector/Vtrunc.con" as lemma.

inline procedural "cic:/Coq/Bool/Bvector/Vextend.con" as lemma.

(* UNEXPORTED
cic:/Coq/Bool/Bvector/VECTORS/f.var
*)

inline procedural "cic:/Coq/Bool/Bvector/Vunary.con" as lemma.

(* UNEXPORTED
cic:/Coq/Bool/Bvector/VECTORS/g.var
*)

inline procedural "cic:/Coq/Bool/Bvector/Vbinary.con" as lemma.

(* UNEXPORTED
End VECTORS
*)

(* suppressed: incompatible with Coq-Art book 
Implicit Arguments Vnil [A].
Implicit Arguments Vcons [A n].
*)

(* UNEXPORTED
Section BOOLEAN_VECTORS
*)

(* 
Un vecteur de bits est un vecteur sur l'ensemble des bool\233\ens de longueur fixe. 
ATTENTION : le stockage s'effectue poids FAIBLE en t\234\te.
On en extrait le bit  de poids faible (head) et la fin du vecteur (tail).
On calcule la n\233\gation d'un vecteur, le et, le ou et le xor bit \224\ bit de 2 vecteurs.
On calcule les d\233\calages d'une position vers la gauche (vers les poids forts, on
utilise donc Vshiftout, vers la droite (vers les poids faibles, on utilise Vshiftin) en 
ins\233\rant un bit 'carry' (logique) ou en r\233\p\233\tant le bit de poids fort (arithm\233\tique).
ATTENTION : Tous les d\233\calages prennent la taille moins un comme param\232\tre
(ils ne travaillent que sur des vecteurs au moins de longueur un).
*)

inline procedural "cic:/Coq/Bool/Bvector/Bvector.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/Bnil.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/Bcons.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/Bvect_true.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/Bvect_false.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/Blow.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/Bhigh.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/Bsign.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/Bneg.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/BVand.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/BVor.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/BVxor.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/BshiftL.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/BshiftRl.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/BshiftRa.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/BshiftL_iter.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/BshiftRl_iter.con" as definition.

inline procedural "cic:/Coq/Bool/Bvector/BshiftRa_iter.con" as definition.

(* UNEXPORTED
End BOOLEAN_VECTORS
*)

