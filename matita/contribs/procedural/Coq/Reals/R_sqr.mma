(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

(* This file was automatically generated: do not edit *********************)

include "Coq.ma".

(*#***********************************************************************)

(*  v      *   The Coq Proof Assistant  /  The Coq Development Team     *)

(* <O___,, * CNRS-Ecole Polytechnique-INRIA Futurs-Universite Paris Sud *)

(*   \VV/  **************************************************************)

(*    //   *      This file is distributed under the terms of the       *)

(*         *       GNU Lesser General Public License Version 2.1        *)

(*#***********************************************************************)

(*i $Id: R_sqr.v,v 1.19.2.1 2004/07/16 19:31:12 herbelin Exp $ i*)

include "Reals/Rbase.ma".

include "Reals/Rbasic_fun.ma".

(* UNEXPORTED
Open Local Scope R_scope.
*)

(*#***************************************************)

(* Rsqr : some results                              *)

(*#***************************************************)

(* UNEXPORTED
Ltac ring_Rsqr := unfold Rsqr in |- *; ring.
*)

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_neg.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_mult.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_plus.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_minus.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_neg_minus.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_1.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_gt_0_0.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_pos_lt.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_div.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_eq_0.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_minus_plus.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_plus_minus.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_incr_0.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_incr_0_var.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_incr_1.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_incrst_0.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_incrst_1.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_neg_pos_le_0.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_neg_pos_le_1.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/neg_pos_Rsqr_le.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_abs.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_le_abs_0.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_le_abs_1.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_lt_abs_0.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_lt_abs_1.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_inj.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_eq_abs_0.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_eq_asb_1.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/triangle_rectangle.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/triangle_rectangle_lt.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/triangle_rectangle_le.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_inv.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/canonical_Rsqr.con" as lemma.

inline procedural "cic:/Coq/Reals/R_sqr/Rsqr_eq.con" as lemma.

