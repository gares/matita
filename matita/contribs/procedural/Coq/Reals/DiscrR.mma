(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

(* This file was automatically generated: do not edit *********************)

include "Coq.ma".

(*#***********************************************************************)

(*  v      *   The Coq Proof Assistant  /  The Coq Development Team     *)

(* <O___,, * CNRS-Ecole Polytechnique-INRIA Futurs-Universite Paris Sud *)

(*   \VV/  **************************************************************)

(*    //   *      This file is distributed under the terms of the       *)

(*         *       GNU Lesser General Public License Version 2.1        *)

(*#***********************************************************************)

(*i        $Id: DiscrR.v,v 1.21.2.1 2004/07/16 19:31:10 herbelin Exp $       i*)

include "Reals/RIneq.ma".

(* UNEXPORTED
Open Local Scope R_scope.
*)

inline procedural "cic:/Coq/Reals/DiscrR/Rlt_R0_R2.con" as lemma.

inline procedural "cic:/Coq/Reals/DiscrR/Rplus_lt_pos.con" as lemma.

inline procedural "cic:/Coq/Reals/DiscrR/IZR_eq.con" as lemma.

inline procedural "cic:/Coq/Reals/DiscrR/IZR_neq.con" as lemma.

(* UNEXPORTED
Ltac discrR :=
  try
   match goal with
   |  |- (?X1 <> ?X2) =>
       replace 2 with (IZR 2);
        [ replace 1 with (IZR 1);
           [ replace 0 with (IZR 0);
              [ repeat
                 rewrite <- plus_IZR ||
                   rewrite <- mult_IZR ||
                     rewrite <- Ropp_Ropp_IZR || rewrite Z_R_minus;
                 apply IZR_neq; try discriminate
              | reflexivity ]
           | reflexivity ]
        | reflexivity ]
   end.
*)

(* UNEXPORTED
Ltac prove_sup0 :=
  match goal with
  |  |- (0 < 1) => apply Rlt_0_1
  |  |- (0 < ?X1) =>
      repeat
       (apply Rmult_lt_0_compat || apply Rplus_lt_pos;
         try apply Rlt_0_1 || apply Rlt_R0_R2)
  |  |- (?X1 > 0) => change (0 < X1) in |- *; prove_sup0
  end.
*)

(* UNEXPORTED
Ltac omega_sup :=
  replace 2 with (IZR 2);
   [ replace 1 with (IZR 1);
      [ replace 0 with (IZR 0);
         [ repeat
            rewrite <- plus_IZR ||
              rewrite <- mult_IZR ||
                rewrite <- Ropp_Ropp_IZR || rewrite Z_R_minus; 
            apply IZR_lt; omega
         | reflexivity ]
      | reflexivity ]
   | reflexivity ].
*)

(* UNEXPORTED
Ltac prove_sup :=
  match goal with
  |  |- (?X1 > ?X2) => change (X2 < X1) in |- *; prove_sup
  |  |- (0 < ?X1) => prove_sup0
  |  |- (- ?X1 < 0) => rewrite <- Ropp_0; prove_sup
  |  |- (- ?X1 < - ?X2) => apply Ropp_lt_gt_contravar; prove_sup
  |  |- (- ?X1 < ?X2) => apply Rlt_trans with 0; prove_sup
  |  |- (?X1 < ?X2) => omega_sup
  | _ => idtac
  end.
*)

(* UNEXPORTED
Ltac Rcompute :=
  replace 2 with (IZR 2);
   [ replace 1 with (IZR 1);
      [ replace 0 with (IZR 0);
         [ repeat
            rewrite <- plus_IZR ||
              rewrite <- mult_IZR ||
                rewrite <- Ropp_Ropp_IZR || rewrite Z_R_minus; 
            apply IZR_eq; try reflexivity
         | reflexivity ]
      | reflexivity ]
   | reflexivity ].
*)

