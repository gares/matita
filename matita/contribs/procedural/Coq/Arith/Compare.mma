(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

(* This file was automatically generated: do not edit *********************)

include "Coq.ma".

(*#***********************************************************************)

(*  v      *   The Coq Proof Assistant  /  The Coq Development Team     *)

(* <O___,, * CNRS-Ecole Polytechnique-INRIA Futurs-Universite Paris Sud *)

(*   \VV/  **************************************************************)

(*    //   *      This file is distributed under the terms of the       *)

(*         *       GNU Lesser General Public License Version 2.1        *)

(*#***********************************************************************)

(*i $Id: Compare.v,v 1.12.2.1 2004/07/16 19:31:00 herbelin Exp $ i*)

(*#* Equality is decidable on [nat] *)

(* UNEXPORTED
Open Local Scope nat_scope.
*)

(*
Lemma not_eq_sym : (A:Set)(p,q:A)(~p=q) -> ~(q=p).
Proof sym_not_eq.
Hints Immediate not_eq_sym : arith.
*)

(* NOTATION
Notation not_eq_sym := sym_not_eq.
*)

(* UNEXPORTED
Implicit Types m n p q : nat.
*)

include "Arith/Arith.ma".

include "Arith/Peano_dec.ma".

include "Arith/Compare_dec.ma".

inline procedural "cic:/Coq/Arith/Compare/le_or_le_S.con" as definition.

inline procedural "cic:/Coq/Arith/Compare/Pcompare.con" as definition.

inline procedural "cic:/Coq/Arith/Compare/le_dec.con" as lemma.

inline procedural "cic:/Coq/Arith/Compare/lt_or_eq.con" as definition.

inline procedural "cic:/Coq/Arith/Compare/le_decide.con" as lemma.

inline procedural "cic:/Coq/Arith/Compare/le_le_S_eq.con" as lemma.

(* By special request of G. Kahn - Used in Group Theory *)

inline procedural "cic:/Coq/Arith/Compare/discrete_nat.con" as lemma.

include "Arith/Wf_nat.ma".

include "Arith/Min.ma".

