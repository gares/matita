(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

(* This file was automatically generated: do not edit *********************)

include "Coq.ma".

(*#***********************************************************************)

(*  v      *   The Coq Proof Assistant  /  The Coq Development Team     *)

(* <O___,, * CNRS-Ecole Polytechnique-INRIA Futurs-Universite Paris Sud *)

(*   \VV/  **************************************************************)

(*    //   *      This file is distributed under the terms of the       *)

(*         *       GNU Lesser General Public License Version 2.1        *)

(*#***********************************************************************)

(*i $Id: Wf_nat.v,v 1.16.2.1 2004/07/16 19:31:01 herbelin Exp $ i*)

(*#* Well-founded relations and natural numbers *)

include "Arith/Lt.ma".

(* UNEXPORTED
Open Local Scope nat_scope.
*)

(* UNEXPORTED
Implicit Types m n p : nat.
*)

(* UNEXPORTED
Section Well_founded_Nat
*)

(* UNEXPORTED
cic:/Coq/Arith/Wf_nat/Well_founded_Nat/A.var
*)

(* UNEXPORTED
cic:/Coq/Arith/Wf_nat/Well_founded_Nat/f.var
*)

inline procedural "cic:/Coq/Arith/Wf_nat/ltof.con" as definition.

inline procedural "cic:/Coq/Arith/Wf_nat/gtof.con" as definition.

inline procedural "cic:/Coq/Arith/Wf_nat/well_founded_ltof.con" as theorem.

inline procedural "cic:/Coq/Arith/Wf_nat/well_founded_gtof.con" as theorem.

(*#* It is possible to directly prove the induction principle going
   back to primitive recursion on natural numbers ([induction_ltof1])
   or to use the previous lemmas to extract a program with a fixpoint
   ([induction_ltof2]) 

the ML-like program for [induction_ltof1] is : [[
   let induction_ltof1 F a = indrec ((f a)+1) a 
   where rec indrec = 
        function 0    -> (function a -> error)
               |(S m) -> (function a -> (F a (function y -> indrec y m)));;
]]

the ML-like program for [induction_ltof2] is : [[
   let induction_ltof2 F a = indrec a
   where rec indrec a = F a indrec;;
]] *)

inline procedural "cic:/Coq/Arith/Wf_nat/induction_ltof1.con" as theorem.

inline procedural "cic:/Coq/Arith/Wf_nat/induction_gtof1.con" as theorem.

inline procedural "cic:/Coq/Arith/Wf_nat/induction_ltof2.con" as theorem.

inline procedural "cic:/Coq/Arith/Wf_nat/induction_gtof2.con" as theorem.

(*#* If a relation [R] is compatible with [lt] i.e. if [x R y => f(x) < f(y)]
    then [R] is well-founded. *)

(* UNEXPORTED
cic:/Coq/Arith/Wf_nat/Well_founded_Nat/R.var
*)

(* UNEXPORTED
cic:/Coq/Arith/Wf_nat/Well_founded_Nat/H_compat.var
*)

inline procedural "cic:/Coq/Arith/Wf_nat/well_founded_lt_compat.con" as theorem.

(* UNEXPORTED
End Well_founded_Nat
*)

inline procedural "cic:/Coq/Arith/Wf_nat/lt_wf.con" as lemma.

inline procedural "cic:/Coq/Arith/Wf_nat/lt_wf_rec1.con" as lemma.

inline procedural "cic:/Coq/Arith/Wf_nat/lt_wf_rec.con" as lemma.

inline procedural "cic:/Coq/Arith/Wf_nat/lt_wf_ind.con" as lemma.

inline procedural "cic:/Coq/Arith/Wf_nat/gt_wf_rec.con" as lemma.

inline procedural "cic:/Coq/Arith/Wf_nat/gt_wf_ind.con" as lemma.

inline procedural "cic:/Coq/Arith/Wf_nat/lt_wf_double_rec.con" as lemma.

inline procedural "cic:/Coq/Arith/Wf_nat/lt_wf_double_ind.con" as lemma.

(* UNEXPORTED
Hint Resolve lt_wf: arith.
*)

(* UNEXPORTED
Hint Resolve well_founded_lt_compat: arith.
*)

(* UNEXPORTED
Section LT_WF_REL
*)

(* UNEXPORTED
cic:/Coq/Arith/Wf_nat/LT_WF_REL/A.var
*)

(* UNEXPORTED
cic:/Coq/Arith/Wf_nat/LT_WF_REL/R.var
*)

(* Relational form of inversion *)

(* UNEXPORTED
cic:/Coq/Arith/Wf_nat/LT_WF_REL/F.var
*)

inline procedural "cic:/Coq/Arith/Wf_nat/inv_lt_rel.con" as definition.

(* UNEXPORTED
cic:/Coq/Arith/Wf_nat/LT_WF_REL/F_compat.var
*)

inline procedural "cic:/Coq/Arith/Wf_nat/acc_lt_rel.con" as remark.

inline procedural "cic:/Coq/Arith/Wf_nat/well_founded_inv_lt_rel_compat.con" as theorem.

(* UNEXPORTED
End LT_WF_REL
*)

inline procedural "cic:/Coq/Arith/Wf_nat/well_founded_inv_rel_inv_lt_rel.con" as lemma.

