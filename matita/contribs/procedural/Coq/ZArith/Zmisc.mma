(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

(* This file was automatically generated: do not edit *********************)

include "Coq.ma".

(*#***********************************************************************)

(*  v      *   The Coq Proof Assistant  /  The Coq Development Team     *)

(* <O___,, * CNRS-Ecole Polytechnique-INRIA Futurs-Universite Paris Sud *)

(*   \VV/  **************************************************************)

(*    //   *      This file is distributed under the terms of the       *)

(*         *       GNU Lesser General Public License Version 2.1        *)

(*#***********************************************************************)

(*i $Id: Zmisc.v,v 1.20.2.1 2004/07/16 19:31:22 herbelin Exp $ i*)

include "ZArith/BinInt.ma".

include "ZArith/Zcompare.ma".

include "ZArith/Zorder.ma".

include "Bool/Bool.ma".

(* UNEXPORTED
Open Local Scope Z_scope.
*)

(*#*********************************************************************)

(*#* Iterators *)

(*#* [n]th iteration of the function [f] *)

inline procedural "cic:/Coq/ZArith/Zmisc/iter_nat.con" as definition.

inline procedural "cic:/Coq/ZArith/Zmisc/iter_pos.con" as definition.

inline procedural "cic:/Coq/ZArith/Zmisc/iter.con" as definition.

inline procedural "cic:/Coq/ZArith/Zmisc/iter_nat_plus.con" as theorem.

inline procedural "cic:/Coq/ZArith/Zmisc/iter_nat_of_P.con" as theorem.

inline procedural "cic:/Coq/ZArith/Zmisc/iter_pos_plus.con" as theorem.

(*#* Preservation of invariants : if [f : A->A] preserves the invariant [Inv], 
    then the iterates of [f] also preserve it. *)

inline procedural "cic:/Coq/ZArith/Zmisc/iter_nat_invariant.con" as theorem.

inline procedural "cic:/Coq/ZArith/Zmisc/iter_pos_invariant.con" as theorem.

