(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

(* This file was automatically generated: do not edit *********************)

include "Coq.ma".

(*#***********************************************************************)

(*  v      *   The Coq Proof Assistant  /  The Coq Development Team     *)

(* <O___,, * CNRS-Ecole Polytechnique-INRIA Futurs-Universite Paris Sud *)

(*   \VV/  **************************************************************)

(*    //   *      This file is distributed under the terms of the       *)

(*         *       GNU Lesser General Public License Version 2.1        *)

(*#***********************************************************************)

(*i $Id: Multiset.v,v 1.9.2.1 2004/07/16 19:31:17 herbelin Exp $ i*)

(* G. Huet 1-9-95 *)

include "Sets/Permut.ma".

(* UNEXPORTED
Set Implicit Arguments.
*)

(* UNEXPORTED
Section multiset_defs
*)

(* UNEXPORTED
cic:/Coq/Sets/Multiset/multiset_defs/A.var
*)

(* UNEXPORTED
cic:/Coq/Sets/Multiset/multiset_defs/eqA.var
*)

(* UNEXPORTED
cic:/Coq/Sets/Multiset/multiset_defs/Aeq_dec.var
*)

inline procedural "cic:/Coq/Sets/Multiset/multiset.ind".

inline procedural "cic:/Coq/Sets/Multiset/EmptyBag.con" as definition.

inline procedural "cic:/Coq/Sets/Multiset/SingletonBag.con" as definition.

inline procedural "cic:/Coq/Sets/Multiset/multiplicity.con" as definition.

(*#* multiset equality *)

inline procedural "cic:/Coq/Sets/Multiset/meq.con" as definition.

(* UNEXPORTED
Hint Unfold meq multiplicity.
*)

inline procedural "cic:/Coq/Sets/Multiset/meq_refl.con" as lemma.

(* UNEXPORTED
Hint Resolve meq_refl.
*)

inline procedural "cic:/Coq/Sets/Multiset/meq_trans.con" as lemma.

inline procedural "cic:/Coq/Sets/Multiset/meq_sym.con" as lemma.

(* UNEXPORTED
Hint Immediate meq_sym.
*)

(*#* multiset union *)

inline procedural "cic:/Coq/Sets/Multiset/munion.con" as definition.

inline procedural "cic:/Coq/Sets/Multiset/munion_empty_left.con" as lemma.

(* UNEXPORTED
Hint Resolve munion_empty_left.
*)

inline procedural "cic:/Coq/Sets/Multiset/munion_empty_right.con" as lemma.

include "Arith/Plus.ma".

(* comm. and ass. of plus *)

inline procedural "cic:/Coq/Sets/Multiset/munion_comm.con" as lemma.

(* UNEXPORTED
Hint Resolve munion_comm.
*)

inline procedural "cic:/Coq/Sets/Multiset/munion_ass.con" as lemma.

(* UNEXPORTED
Hint Resolve munion_ass.
*)

inline procedural "cic:/Coq/Sets/Multiset/meq_left.con" as lemma.

(* UNEXPORTED
Hint Resolve meq_left.
*)

inline procedural "cic:/Coq/Sets/Multiset/meq_right.con" as lemma.

(* UNEXPORTED
Hint Resolve meq_right.
*)

(*#* Here we should make multiset an abstract datatype, by hiding [Bag],
    [munion], [multiplicity]; all further properties are proved abstractly *)

inline procedural "cic:/Coq/Sets/Multiset/munion_rotate.con" as lemma.

inline procedural "cic:/Coq/Sets/Multiset/meq_congr.con" as lemma.

inline procedural "cic:/Coq/Sets/Multiset/munion_perm_left.con" as lemma.

inline procedural "cic:/Coq/Sets/Multiset/multiset_twist1.con" as lemma.

inline procedural "cic:/Coq/Sets/Multiset/multiset_twist2.con" as lemma.

(*#* specific for treesort *)

inline procedural "cic:/Coq/Sets/Multiset/treesort_twist1.con" as lemma.

inline procedural "cic:/Coq/Sets/Multiset/treesort_twist2.con" as lemma.

(*i theory of minter to do similarly 
Require Min.
(* multiset intersection *)
Definition minter := [m1,m2:multiset]
    (Bag [a:A](min (multiplicity m1 a)(multiplicity m2 a))).
i*)

(* UNEXPORTED
End multiset_defs
*)

(* UNEXPORTED
Unset Implicit Arguments.
*)

(* UNEXPORTED
Hint Unfold meq multiplicity: v62 datatypes.
*)

(* UNEXPORTED
Hint Resolve munion_empty_right munion_comm munion_ass meq_left meq_right
  munion_empty_left: v62 datatypes.
*)

(* UNEXPORTED
Hint Immediate meq_sym: v62 datatypes.
*)

