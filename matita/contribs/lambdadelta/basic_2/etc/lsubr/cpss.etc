(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

notation "hvbox( L ⊢ break term 46 T1 ▶* break term 46 T2 )"
   non associative with precedence 45
   for @{ 'PSubstStar $L $T1 $T2 }.

include "basic_2/grammar/cl_shift.ma".
include "basic_2/relocation/ldrop_append.ma".
include "basic_2/substitution/lsubr.ma".

(* CONTEXT-SENSITIVE PARALLEL SUBSTITUTION FOR TERMS ************************)

inductive cpss: lenv → relation term ≝
| cpss_atom : ∀I,L. cpss L (⓪{I}) (⓪{I})
| cpss_delta: ∀L,K,V,V2,W2,i.
              ⇩[0, i] L ≡ K. ⓓV → cpss K V V2 →
              ⇧[0, i + 1] V2 ≡ W2 → cpss L (#i) W2
| cpss_bind : ∀a,I,L,V1,V2,T1,T2.
              cpss L V1 V2 → cpss (L. ⓑ{I} V1) T1 T2 →
              cpss L (ⓑ{a,I} V1. T1) (ⓑ{a,I} V2. T2)
| cpss_flat : ∀I,L,V1,V2,T1,T2.
              cpss L V1 V2 → cpss L T1 T2 →
              cpss L (ⓕ{I} V1. T1) (ⓕ{I} V2. T2)
.

interpretation "context-sensitive parallel substitution (term)"
   'PSubstStar L T1 T2 = (cpss L T1 T2).

(* Basic properties *********************************************************)

lemma cpss_lsubr_trans: lsub_trans … cpss lsubr.
#L1 #T1 #T2 #H elim H -L1 -T1 -T2
[ //
| #L1 #K1 #V1 #V2 #W2 #i #HLK1 #_ #HVW2 #IHV12 #L2 #HL12
  elim (lsubr_fwd_ldrop2_abbr … HL12 … HLK1) -HL12 -HLK1 /3 width=6/
| /4 width=1/
| /3 width=1/
]
qed-.

(* Basic_1: was by definition: subst1_refl *)
lemma cpss_refl: ∀T,L. L ⊢ T ▶* T.
#T elim T -T //
#I elim I -I /2 width=1/
qed.

(* Basic_1: was only: subst1_ex *)
lemma cpss_delift: ∀K,V,T1,L,d. ⇩[0, d] L ≡ (K. ⓓV) →
                   ∃∃T2,T. L ⊢ T1 ▶* T2 & ⇧[d, 1] T ≡ T2.
#K #V #T1 elim T1 -T1
[ * #i #L #d #HLK /2 width=4/
  elim (lt_or_eq_or_gt i d) #Hid /3 width=4/
  destruct
  elim (lift_total V 0 (i+1)) #W #HVW
  elim (lift_split … HVW i i) // /3 width=6/
| * [ #a ] #I #W1 #U1 #IHW1 #IHU1 #L #d #HLK
  elim (IHW1 … HLK) -IHW1 #W2 #W #HW12 #HW2
  [ elim (IHU1 (L. ⓑ{I} W1) (d+1)) -IHU1 /2 width=1/ -HLK /3 width=9/
  | elim (IHU1 … HLK) -IHU1 -HLK /3 width=8/
  ]
]
qed-.

lemma cpss_append: l_appendable_sn … cpss.
#K #T1 #T2 #H elim H -K -T1 -T2 // /2 width=1/
#K #K0 #V1 #V2 #W2 #i #HK0 #_ #HVW2 #IHV12 #L
lapply (ldrop_fwd_length_lt2 … HK0) #H
@(cpss_delta … (L@@K0) V1 … HVW2) //
@(ldrop_O1_append_sn_le … HK0) /2 width=2/ (**) (* /3/ does not work *)
qed.

(* Basic inversion lemmas ***************************************************)

fact cpss_inv_atom1_aux: ∀L,T1,T2. L ⊢ T1 ▶* T2 → ∀I. T1 = ⓪{I} →
                         T2 = ⓪{I} ∨
                         ∃∃K,V,V2,i. ⇩[O, i] L ≡ K. ⓓV &
                                     K ⊢ V ▶* V2 &
                                     ⇧[O, i + 1] V2 ≡ T2 &
                                     I = LRef i.
#L #T1 #T2 * -L -T1 -T2
[ #I #L #J #H destruct /2 width=1/
| #L #K #V #V2 #T2 #i #HLK #HV2 #HVT2 #I #H destruct /3 width=8/
| #a #I #L #V1 #V2 #T1 #T2 #_ #_ #J #H destruct
| #I #L #V1 #V2 #T1 #T2 #_ #_ #J #H destruct
]
qed-.

lemma cpss_inv_atom1: ∀I,L,T2. L ⊢ ⓪{I} ▶* T2 →
                      T2 = ⓪{I} ∨
                      ∃∃K,V,V2,i. ⇩[O, i] L ≡ K. ⓓV &
                                  K ⊢ V ▶* V2 &
                                  ⇧[O, i + 1] V2 ≡ T2 &
                                  I = LRef i.
/2 width=3 by cpss_inv_atom1_aux/ qed-.

(* Basic_1: was only: subst1_gen_sort *)
lemma cpss_inv_sort1: ∀L,T2,k. L ⊢ ⋆k ▶* T2 → T2 = ⋆k.
#L #T2 #k #H
elim (cpss_inv_atom1 … H) -H //
* #K #V #V2 #i #_ #_ #_ #H destruct
qed-.

(* Basic_1: was only: subst1_gen_lref *)
lemma cpss_inv_lref1: ∀L,T2,i. L ⊢ #i ▶* T2 →
                      T2 = #i ∨
                      ∃∃K,V,V2. ⇩[O, i] L ≡ K. ⓓV &
                                K ⊢ V ▶* V2 &
                                ⇧[O, i + 1] V2 ≡ T2.
#L #T2 #i #H
elim (cpss_inv_atom1 … H) -H /2 width=1/
* #K #V #V2 #j #HLK #HV2 #HVT2 #H destruct /3 width=6/
qed-.

lemma cpss_inv_gref1: ∀L,T2,p. L ⊢ §p ▶* T2 → T2 = §p.
#L #T2 #p #H
elim (cpss_inv_atom1 … H) -H //
* #K #V #V2 #i #_ #_ #_ #H destruct
qed-.

fact cpss_inv_bind1_aux: ∀L,U1,U2. L ⊢ U1 ▶* U2 →
                         ∀a,I,V1,T1. U1 = ⓑ{a,I} V1. T1 →
                         ∃∃V2,T2. L ⊢ V1 ▶* V2 &
                                  L. ⓑ{I} V1 ⊢ T1 ▶* T2 &
                                  U2 = ⓑ{a,I} V2. T2.
#L #U1 #U2 * -L -U1 -U2
[ #I #L #b #J #W1 #U1 #H destruct
| #L #K #V #V2 #W2 #i #_ #_ #_ #b #J #W1 #U1 #H destruct
| #a #I #L #V1 #V2 #T1 #T2 #HV12 #HT12 #b #J #W1 #U1 #H destruct /2 width=5/
| #I #L #V1 #V2 #T1 #T2 #_ #_ #b #J #W1 #U1 #H destruct
]
qed-.

lemma cpss_inv_bind1: ∀a,I,L,V1,T1,U2. L ⊢ ⓑ{a,I} V1. T1 ▶* U2 →
                      ∃∃V2,T2. L ⊢ V1 ▶* V2 &
                               L. ⓑ{I} V1 ⊢ T1 ▶* T2 &
                               U2 = ⓑ{a,I} V2. T2.
/2 width=3 by cpss_inv_bind1_aux/ qed-.

fact cpss_inv_flat1_aux: ∀L,U1,U2. L ⊢ U1 ▶* U2 →
                         ∀I,V1,T1. U1 = ⓕ{I} V1. T1 →
                         ∃∃V2,T2. L ⊢ V1 ▶* V2 & L ⊢ T1 ▶* T2 &
                                  U2 =  ⓕ{I} V2. T2.
#L #U1 #U2 * -L -U1 -U2
[ #I #L #J #W1 #U1 #H destruct
| #L #K #V #V2 #W2 #i #_ #_ #_ #J #W1 #U1 #H destruct
| #a #I #L #V1 #V2 #T1 #T2 #_ #_ #J #W1 #U1 #H destruct
| #I #L #V1 #V2 #T1 #T2 #HV12 #HT12 #J #W1 #U1 #H destruct /2 width=5/
]
qed-.

lemma cpss_inv_flat1: ∀I,L,V1,T1,U2. L ⊢ ⓕ{I} V1. T1 ▶* U2 →
                      ∃∃V2,T2. L ⊢ V1 ▶* V2 & L ⊢ T1 ▶* T2 &
                               U2 =  ⓕ{I} V2. T2.
/2 width=3 by cpss_inv_flat1_aux/ qed-.

(* Basic forward lemmas *****************************************************)

lemma cpss_fwd_tw: ∀L,T1,T2. L ⊢ T1 ▶* T2 → ♯{T1} ≤ ♯{T2}.
#L #T1 #T2 #H elim H -L -T1 -T2 normalize
/3 width=1 by monotonic_le_plus_l, le_plus/ (**) (* auto is too slow without trace *)
qed-.

lemma cpss_fwd_shift1: ∀L1,L,T1,T. L ⊢ L1 @@ T1 ▶* T →
                       ∃∃L2,T2. |L1| = |L2| & T = L2 @@ T2.
#L1 @(lenv_ind_dx … L1) -L1 normalize
[ #L #T1 #T #HT1
  @(ex2_2_intro … (⋆)) // (**) (* explicit constructor *)
| #I #L1 #V1 #IH #L #T1 #X
  >shift_append_assoc normalize #H
  elim (cpss_inv_bind1 … H) -H
  #V0 #T0 #_ #HT10 #H destruct
  elim (IH … HT10) -IH -HT10 #L2 #T2 #HL12 #H destruct
  >append_length >HL12 -HL12
  @(ex2_2_intro … (⋆.ⓑ{I}V0@@L2) T2) [ >append_length ] // /2 width=3/ (**) (* explicit constructor *)
]
qed-.

(* Basic_1: removed theorems 27:
            subst0_gen_sort subst0_gen_lref subst0_gen_head subst0_gen_lift_lt
            subst0_gen_lift_false subst0_gen_lift_ge subst0_refl subst0_trans
            subst0_lift_lt subst0_lift_ge subst0_lift_ge_S subst0_lift_ge_s
            subst0_subst0 subst0_subst0_back subst0_weight_le subst0_weight_lt
            subst0_confluence_neq subst0_confluence_eq subst0_tlt_head
            subst0_confluence_lift subst0_tlt
            subst1_head subst1_gen_head subst1_lift_S subst1_confluence_lift
            subst1_gen_lift_eq subst1_confluence_neq
*)
