(* Basic forward lemmas *****************************************************)

lemma csup_fwd_ldrop: ∀L1,L2,T1,T2. ⦃L1, T1⦄ > ⦃L2, T2⦄ →
                      ∃i. ⇩[0, i] L1 ≡ L2 ∨ ⇩[0, i] L2 ≡ L1.
#L1 #L2 #T1 #T2 * -L1 -L2 -T1 -T2 /3 width=2/ /4 width=2/
#I #L1 #K1 #V1 #i #HLK1
lapply (ldrop_fwd_ldrop2 … HLK1) -HLK1 /3 width=2/
qed-. 

(* Advanced forward lemmas **************************************************)

lemma lift_csup_trans_eq: ∀T1,U1,d,e. ⇧[d, e] T1 ≡ U1 →
                          ∀L,U2. ⦃L, U1⦄ > ⦃L, U2⦄ → 
                          ∃T2. ⇧[d, e] T2 ≡ U2.
#T1 #U1 #d #e * -T1 -U1 -d -e
[5: #a #I #V1 #W1 #T1 #U1 #d #e #HVW1 #_ #L #X #H
    elim (csup_inv_bind1 … H) -H *
    [ #_ #H destruct /2 width=2/
    | #H elim (discr_lpair_x_xy … H)
    ]
|6: #I #V1 #W1 #T1 #U1 #d #e #HVW1 #HUT1 #L #X #H
    elim (csup_inv_flat1 … H) -H #_ * #H destruct /2 width=2/
]
#i #d #e [2,3: #_ ] #L #X #H
elim (csup_inv_atom1 … H) -H #I #j #HL #H destruct
lapply (ldrop_pair2_fwd_cw … HL X) -HL #H
elim (lt_refl_false … H)
qed-.
(*
lemma lift_csup_trans_gt: ∀L1,L2,U1,U2. ⦃L1, U1⦄ > ⦃L2, U2⦄ →
                          ⇩[0, 1] L2 ≡ L1 → ∀T1,d,e. ⇧[d, e] T1 ≡ U1 →
                          ∃T2. ⇧[d + 1, e] T2 ≡ U2.
#L1 #L2 #U1 #U2 * -L1 -L2 -U1 -U2
[ #I #L1 #K1 #V #i #HLK1 #HKL1
  lapply (ldrop_fwd_lw … HLK1) -HLK1 #HLK1
  lapply (ldrop_fwd_lw … HKL1) -HKL1 #HKL1
  lapply (transitive_le … HLK1 HKL1) -L1 normalize #H
  
  
| #a
| #a
]
#I #L1 #W1 #U1 #HL1
  


 #X #d #e #H
  lapply (ldrop_inv_refl … HL1) -HL1
| #a #I #L1 #W1 #U1 #j #HL1 #X #d #e #H
  lapply (ldrop_inv_ldrop1 … HL1)

  elim (lift_inv_bind2 … H) -H #W2 #U2 #HW21 #HU21 #H destruct 
   

 /3 width=2/ /4 width=2/

*)



(* Advanced inversion lemmas ************************************************)

lemma csup_inv_lref2_be: ∀L,U,i. ⦃L, U⦄ > ⦃L, #i⦄ →
                         ∀T,d,e. ⇧[d, e] T ≡ U → d ≤ i → i < d + e → ⊥.
#L #U #i #H #T #d #e #HTU #Hdi #Hide
elim (lift_csup_trans_eq … HTU … H) -H -T #T #H
elim (lift_inv_lref2_be … H ? ?) //
qed-.


fact csup_inv_all4_refl_aux: ∀L1,L2,T1,T2. ⦃L1, T1⦄ > ⦃L2, T2⦄ → L1 = L2 →
                             ∨∨ ∃∃a,I,U. T1 = ⓑ{a,I}T2.U
                              | ∃∃I,W. T1 = ⓕ{I}W.T2
                              | ∃∃I,U. T1 = ⓕ{I}T2.U.
#L1 #L2 #T1 #T2 * -L1 -L2 -T1 -T2 /3 width=3/ /3 width=4/
[ #I #L #K #V #i #HLK #H destruct
  lapply (ldrop_pair2_fwd_cw … HLK V) -HLK #H
  elim (lt_refl_false … H)
| #a #I #L #V #T #H
  elim (discr_lpair_x_xy … H)
]
qed-.

lemma csup_inv_all4_refl: ∀L,T1,T2. ⦃L, T1⦄ > ⦃L, T2⦄ →
                          ∨∨ ∃∃a,I,U. T1 = ⓑ{a,I}T2.U
                           | ∃∃I,W. T1 = ⓕ{I}W.T2
                           | ∃∃I,U. T1 = ⓕ{I}T2.U.
/2 width=4 by csup_inv_all4_refl_aux/ qed-.
