(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/equivalence/cpcs_cpcs.ma".
include "basic_2/dynamic/snta.ma".

(* NATIVE TYPE ASSIGNMENT ON TERMS ******************************************)

(* Advanced inversion lemmas ************************************************)

fact snta_inv_sort1_aux: ∀h,L,T,U,l. ⦃h, L⦄ ⊢ T :[l] U → ∀k0. T = ⋆k0 →
                         l = 0 ∧ L ⊢ ⋆(next h k0) ⬌* U.
#h #L #T #U #l #H elim H -L -T -U -l
[ #L #k #k0 #H destruct /2 width=1/
| #L #K #V #W #U #i #l #_ #_ #_ #_ #k0 #H destruct
| #L #K #W #V #U #i #l #_ #_ #_ #_ #k0 #H destruct
| #I #L #V #W #T #U #l1 #l2 #_ #_ #_ #_ #k0 #H destruct
| #L #V #W1 #W2 #T #U #l1 #l2 #_ #_ #_ #_ #k0 #H destruct
| #L #V #T #U #W #l #_ #_ #_ #_ #k0 #H destruct
| #L #T #U #W #l1 #l2 #_ #_ #_ #_ #k0 #H destruct
| #L #T #U1 #U2 #V2 #l #_ #HU12 #_ #IHTU1 #_ #k0 #H destruct
  elim (IHTU1 ??) -IHTU1 [3: // |2: skip ] #H #Hk0
  lapply (cpcs_trans … Hk0 … HU12) -U1 /2 width=1/
]
qed.

lemma snta_inv_sort1: ∀h,L,U,k,l. ⦃h, L⦄ ⊢ ⋆k :[l] U →
                      l = 0 ∧ L ⊢ ⋆(next h k) ⬌* U.
/2 width=4/ qed-.

fact snta_inv_lref1_aux: ∀h,L,T,U,l. ⦃h, L⦄ ⊢ T :[l] U → ∀j. T = #j →
                         (∃∃K,V,W,U0. ⇩[0, j] L ≡ K. ⓓV & ⦃h, K⦄ ⊢ V :[l] W &
                                      ⇧[0, j + 1] W ≡ U0 & L ⊢ U0 ⬌* U
                         ) ∨
                         (∃∃K,W,V,U0. ⇩[0, j] L ≡ K. ⓛW & ⦃h, K⦄ ⊢ W :[l-1] V &
                                      ⇧[0, j + 1] W ≡ U0 & l > 0 & L ⊢ U0 ⬌* U
                         ).
#h #L #T #U #l #H elim H -L -T -U -l
[ #L #k #j #H destruct
| #L #K #V #W #U #i #l #HLK #HVW #HWU #_ #j #H destruct /3 width=8/
| #L #K #W #V #U #i #l #HLK #HWV #HWU #_ #j #H destruct /3 width=8/
| #I #L #V #W #T #U #l1 #l2 #_ #_ #_ #_ #j #H destruct
| #L #V #W1 #W2 #T #U #l1 #l2 #_ #_ #_ #_ #j #H destruct
| #L #V #T #U #W #l #_ #_ #_ #_ #j #H destruct
| #L #T #U #W #l1 #l2 #_ #_ #_ #_ #j #H destruct
| #L #T #U1 #U2 #V2 #l #_ #HU12 #_ #IHTU1 #_ #j #H destruct
  elim (IHTU1 ??) -IHTU1 [4: // |2: skip ] * #K #V #W #U0 #HLK #HVW #HWU0 [2: #H ] #HU01
  lapply (cpcs_trans … HU01 … HU12) -U1 /3 width=8/
]
qed.

lemma snta_inv_lref1: ∀h,L,U,i,l. ⦃h, L⦄ ⊢ #i :[l] U →
                     (∃∃K,V,W,U0. ⇩[0, i] L ≡ K. ⓓV & ⦃h, K⦄ ⊢ V :[l] W &
                                  ⇧[0, i + 1] W ≡ U0 & L ⊢ U0 ⬌* U
                     ) ∨
                     (∃∃K,W,V,U0. ⇩[0, i] L ≡ K. ⓛW & ⦃h, K⦄ ⊢ W :[l-1] V &
                                  ⇧[0, i + 1] W ≡ U0 & l > 0 & L ⊢ U0 ⬌* U
                     ).
/2 width=3/ qed-.

fact snta_inv_bind1_aux: ∀h,L,T,U,l. ⦃h, L⦄ ⊢ T :[l] U → ∀J,X,Y. T = ⓑ{J}Y.X →
                         ∃∃Z1,Z2,l0. ⦃h, L⦄ ⊢ Y :[l0] Z1 &
                                  ⦃h, L.ⓑ{J}Y⦄ ⊢ X :[l] Z2 &
                                  L ⊢ ⓑ{J}Y.Z2 ⬌* U.
#h #L #T #U #l #H elim H -L -T -U -l
[ #L #k #J #X #Y #H destruct
| #L #K #V #W #U #i #l #_ #_ #_ #_ #J #X #Y #H destruct
| #L #K #W #V #U #i #l #_ #_ #_ #_ #J #X #Y #H destruct
| #I #L #V #W #T #U #l1 #l2 #HVW #HTU #_ #_ #J #X #Y #H destruct /2 width=3/
| #L #V #W1 #W2 #T #U #l1 #l2 #_ #_ #_ #_ #J #X #Y #H destruct
| #L #V #T #U #W #l #_ #_ #_ #_ #J #X #Y #H destruct
| #L #T #U #W #l1 #l2 #_ #_ #_ #_ #J #X #Y #H destruct
| #L #T #U1 #U2 #V2 #l #_ #HU12 #_ #IHTU1 #_ #J #X #Y #H destruct
  elim (IHTU1 ????) -IHTU1 [5: // |2,3,4: skip ] #Z1 #Z2 #l0 #HZ1 #HZ2 #HU1
  lapply (cpcs_trans … HU1 … HU12) -U1 /2 width=3/
]
qed.

lemma snta_inv_bind1: ∀h,J,L,Y,X,U,l. ⦃h, L⦄ ⊢ ⓑ{J}Y.X :[l] U →
                      ∃∃Z1,Z2,l0. ⦃h, L⦄ ⊢ Y :[l0] Z1 & ⦃h, L.ⓑ{J}Y⦄ ⊢ X :[l] Z2 &
                                  L ⊢ ⓑ{J}Y.Z2 ⬌* U.
/2 width=3/ qed-.

fact snta_inv_cast1_aux: ∀h,L,T,U,l. ⦃h, L⦄ ⊢ T :[l] U → ∀X,Y. T = ⓝY.X →
                      ⦃h, L⦄ ⊢ X :[l] Y ∧ L ⊢ Y ⬌* U.
#h #L #T #U #l #H elim H -L -T -U -l
[ #L #k #X #Y #H destruct
| #L #K #V #W #U #i #l #_ #_ #_ #_ #X #Y #H destruct
| #L #K #W #V #U #i #l #_ #_ #_ #_ #X #Y #H destruct
| #I #L #V #W #T #U #l1 #l2 #_ #_ #_ #_ #X #Y #H destruct
| #L #V #W1 #W2 #T #U #l1 #l2 #_ #_ #_ #_ #X #Y #H destruct
| #L #V #T #U #W #l #_ #_ #_ #_ #X #Y #H destruct
| #L #T #U #W #l1 #l2 #HTU #_ #_ #_ #X #Y #H destruct /2 width=1/
| #L #T #U1 #U2 #V2 #l #_ #HU12 #_ #IHTU1 #_ #X #Y #H destruct
  elim (IHTU1 ???) -IHTU1 [4: // |2,3: skip ] #HXY #HU1
  lapply (cpcs_trans … HU1 … HU12) -U1 /2 width=1/
]
qed.

lemma snta_inv_cast1: ∀h,L,X,Y,U,l. ⦃h, L⦄ ⊢ ⓝY.X :[l] U →
                      ⦃h, L⦄ ⊢ X :[l] Y ∧ L ⊢ Y ⬌* U.
/2 width=3/ qed-.

(* Properties on relocation *************************************************)

lemma snta_lift: ∀h,L1,T1,U1,l. ⦃h, L1⦄ ⊢ T1 :[l] U1 →
                 ∀L2,d,e. ⇩[d, e] L2 ≡ L1 →
                 ∀T2. ⇧[d, e] T1 ≡ T2 → ∀U2. ⇧[d, e] U1 ≡ U2 →
                 ⦃h, L2⦄ ⊢ T2 :[l] U2.
#h #L1 #T1 #U1 #l #H elim H -L1 -T1 -U1 -l
[ #L1 #k #L2 #d #e #HL21 #X1 #H1 #X2 #H2
  >(lift_inv_sort1 … H1) -X1
  >(lift_inv_sort1 … H2) -X2 //
| #L1 #K1 #V1 #W1 #W #i #l #HLK1 #_ #HW1 #IHVW1 #L2 #d #e #HL21 #X #H #U2 #HWU2
  elim (lift_inv_lref1 … H) * #Hid #H destruct
  [ elim (lift_trans_ge … HW1 … HWU2 ?) -W // #W2 #HW12 #HWU2
    elim (ldrop_trans_le … HL21 … HLK1 ?) -L1 /2 width=2/ #X #HLK2 #H
    elim (ldrop_inv_skip2 … H ?) -H /2 width=1/ -Hid #K2 #V2 #HK21 #HV12 #H destruct
    /3 width=8/
  | lapply (lift_trans_be … HW1 … HWU2 ? ?) -W // /2 width=1/ #HW1U2
    lapply (ldrop_trans_ge … HL21 … HLK1 ?) -L1 // -Hid /3 width=8/
  ]
| #L1 #K1 #W1 #V1 #W #i #l #HLK1 #_ #HW1 #IHWV1 #L2 #d #e #HL21 #X #H #U2 #HWU2
  elim (lift_inv_lref1 … H) * #Hid #H destruct
  [ elim (lift_trans_ge … HW1 … HWU2 ?) -W // <minus_plus #W #HW1 #HWU2
    elim (ldrop_trans_le … HL21 … HLK1 ?) -L1 /2 width=2/ #X #HLK2 #H
    elim (ldrop_inv_skip2 … H ?) -H /2 width=1/ -Hid #K2 #W2 #HK21 #HW12 #H destruct
    lapply (lift_mono … HW1 … HW12) -HW1 #H destruct
    elim (lift_total V1 (d-i-1) e) /3 width=8/
  | lapply (lift_trans_be … HW1 … HWU2 ? ?) -W // /2 width=1/ #HW1U2
    lapply (ldrop_trans_ge … HL21 … HLK1 ?) -L1 // -Hid /3 width=8/
  ]
| #I #L1 #V1 #W1 #T1 #U1 #l1 #l2 #_ #_ #IHVW1 #IHTU1 #L2 #d #e #HL21 #X1 #H1 #X2 #H2
  elim (lift_inv_bind1 … H1) -H1 #V2 #T2 #HV12 #HT12 #H destruct
  elim (lift_inv_bind1 … H2) -H2 #X #U2 #H1 #HU12 #H2 destruct
  lapply (lift_mono … H1 … HV12) -H1 #H destruct
  elim (lift_total W1 d e) /4 width=6/
| #L1 #V1 #W11 #W12 #T1 #U1 #l1 #l2 #_ #_ #IHVW1 #IHTU1 #L2 #d #e #HL21 #X1 #H1 #X2 #H2
  elim (lift_inv_flat1 … H1) -H1 #V2 #X #HV12 #H1 #H destruct
  elim (lift_inv_bind1 … H1) -H1 #W21 #T2 #HW121 #HT12 #H destruct
  elim (lift_inv_flat1 … H2) -H2 #Y2 #X #HY #H2 #H destruct
  elim (lift_inv_bind1 … H2) -H2 #W22 #U2 #HW122 #HU12 #H destruct
  lapply (lift_mono … HY … HV12) -HY #H destruct /4 width=6/
| #L1 #V1 #T1 #U1 #W1 #l #_ #_ #IHTU1 #IHUW1 #L2 #d #e #HL21 #X1 #H1 #X2 #H2
  elim (lift_inv_flat1 … H1) -H1 #V2 #T2 #HV12 #HT12 #H destruct
  elim (lift_inv_flat1 … H2) -H2 #X #U2 #H1 #HU12 #H2 destruct
  lapply (lift_mono … H1 … HV12) -H1 #H destruct
  elim (lift_total W1 d e) #W2 #HW12 /4 width=6/
| #L1 #T1 #U1 #W1 #l1 #l2 #_ #_ #IHTU1 #IHUW1 #L2 #d #e #HL21 #X #H #U2 #HU12
  elim (lift_inv_flat1 … H) -H #X2 #T2 #HUX2 #HT12 #H destruct
  lapply (lift_mono … HUX2 … HU12) -HUX2 #H destruct
  elim (lift_total W1 d e) /3 width=6/
| #L1 #T1 #U11 #U12 #V12 #l #_ #HU112 #_ #IHTU11 #IHUV12 #L2 #d #e #HL21 #U1 #HTU1 #U2 #HU12
  elim (lift_total U11 d e) #U #HU11
  elim (lift_total V12 d e) #V22 #HV122
  lapply (cpcs_lift … HL21 … HU11 … HU12 HU112) -HU112 /3 width=6/
]
qed.

(* Advanced forvard lemmas **************************************************)

fact snta_fwd_pure1_aux: ∀h,L,T,U,l. ⦃h, L⦄ ⊢ T :[l] U → ∀X,Y. T = ⓐY.X →
                         ∃∃V,W,l0. ⦃h, L⦄ ⊢ Y :[l0+1] W & ⦃h, L⦄ ⊢ X :[l] V &
                                   L ⊢ ⓐY.V ⬌* U.
#h #L #T #U #l #H elim H -L -T -U -l
[ #L #k #X #Y #H destruct
| #L #K #V #W #U #i #l #_ #_ #_ #_ #X #Y #H destruct
| #L #K #W #V #U #i #l #_ #_ #_ #_ #X #Y #H destruct
| #I #L #V #W #T #U #l1 #l2 #_ #_ #_ #_ #X #Y #H destruct
| #L #V #W1 #W2 #T #U #l1 #l2 #HVW2 #HTU #_ #_ #X #Y #H destruct /2 width=3/
| #L #V #T #U #W #l #HTU #_ #_ #IHU #X #Y #H destruct
  elim (IHU U Y ?) -IHU // /3 width=3/
| #L #T #U #W #l1 #l2 #_ #_ #_ #_ #X #Y #H destruct
| #L #T #U1 #U2 #V2 #l #_ #HU12 #_ #IHTU1 #_ #X #Y #H destruct
  elim (IHTU1 ???) -IHTU1 [4: // |2,3: skip ] #V #W #l0 #HYW #HXV #HU1
  lapply (cpcs_trans … HU1 … HU12) -U1 /2 width=3/
]
qed.

lemma snta_fwd_pure1: ∀h,L,X,Y,U,l. ⦃h, L⦄ ⊢ ⓐY.X :[l] U →
                      ∃∃V,W,l0. ⦃h, L⦄ ⊢ Y :[l0+1] W & ⦃h, L⦄ ⊢ X :[l] V &
                                L ⊢ ⓐY.V ⬌* U.
/2 width=3/ qed-.

lemma snta_fwd_correct: ∀h,L,T,U,l. ⦃h, L⦄ ⊢ T :[l] U →
                        ∃T0. ⦃h, L⦄ ⊢ U :[l-1] T0.
#h #L #T #U #l #H elim H -L -T -U -l
[ /2 width=2/
| #L #K #V #W #W0 #i #l #HLK #_ #HW0 * #V0 #HWV0
  lapply (ldrop_fwd_ldrop2 … HLK) -HLK #HLK
  elim (lift_total V0 0 (i+1)) /3 width=10/
| #L #K #W #V #V0 #i #l #HLK #HWV #HWV0 #_
  lapply (ldrop_fwd_ldrop2 … HLK) -HLK #HLK
  elim (lift_total V 0 (i+1)) /3 width=10/
| #I #L #V #W #T #U #l1 #l2 #HVW #_ #_ * /3 width=3/
| #L #V #W1 #W2 #T #U #l1 #l2 #HVW2 #_ #_ * #X #H
  elim (snta_inv_bind1 … H) -H /4 width=5/   
| /3 width=2/
| /2 width=2/
| /2 width=2/
]
qed-.

(* Advanced properties ******************************************************)

lemma snta_cast_short: ∀h,L,T,U,l. ⦃h, L⦄ ⊢ T :[l] U → ⦃h, L⦄ ⊢ ⓝU.T :[l] U.
#h #L #T #U #l #HTU
elim (snta_fwd_correct … HTU) /2 width=3/
qed.

lemma snta_typecheck: ∀h,L,T,U,l. ⦃h, L⦄ ⊢ T :[l] U →
                      ∃T0. ⦃h, L⦄ ⊢ ⓝU.T :[l] T0.
/3 width=2/ qed.

lemma snta_cast_old: ∀h,L,W,T,U,l.
                    ⦃h, L⦄ ⊢ T :[l] U → ⦃h, L⦄ ⊢ U :[l-1] W → ⦃h, L⦄ ⊢ ⓝU.T :[l] ⓝW.U.
#h #L #W #T #U #l #HTU #HUW
@(snta_conv … U) /2 width=2/ /3 width=1/ (**) (* /4 width=3/ is a bit slow *)
qed.

lemma snta_appl_old: ∀h,L,V,W,T,U,l1,l2.
                     ⦃h, L⦄ ⊢ V :[l1+1] W → ⦃h, L⦄ ⊢ T :[l2+1] ⓛW.U →
                     ⦃h, L⦄ ⊢ ⓐV.T :[l2+1] ⓐV.ⓛW.U.
#h #L #V #W #T #U #l1 #l2 #HVW #HTU
elim (snta_fwd_correct … HTU) #X #H
elim (snta_inv_bind1 … H) -H /4 width=5/
qed.
