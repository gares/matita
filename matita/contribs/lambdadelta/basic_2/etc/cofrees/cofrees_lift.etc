(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/substitution/cpys_lift.ma".
include "basic_2/substitution/cofrees.ma".

(* CONTEXT-SENSITIVE EXCLUSION FROM FREE VARIABLES **************************)

(* Advanced inversion lemmas ************************************************)

lemma cofrees_inv_lref_be: ‚àÄL,d,i,j. L ‚ä¢ i ~œµ ùêÖ*[d]‚¶É#j‚¶Ñ ‚Üí d ‚â§ yinj j ‚Üí j < i ‚Üí
                           ‚àÄI,K,W. ‚á©[j]L ‚â° K.‚ìë{I}W ‚Üí K ‚ä¢ i-j-1 ~œµ ùêÖ*[yinj 0]‚¶ÉW‚¶Ñ.
#L #d #i #j #Hj #Hdj #Hji #I #K #W1 #HLK #W2 #HW12 elim (lift_total W2 0 (j+1))
#X2 #HWX2 elim (Hj X2) /2 width=7 by cpys_subst_Y2/ -I -L -K -W1 -d
#Z2 #HZX2 elim (lift_div_le ‚Ä¶ HWX2 (i-j-1) 1 Z2) -HWX2 /2 width=2 by ex_intro/
>minus_plus <plus_minus_m_m //
qed-.

lemma cofrees_inv_be: ‚àÄL,U,d,i. L ‚ä¢ i ~œµ ùêÖ*[d]‚¶ÉU‚¶Ñ ‚Üí ‚àÄj. (‚àÄT. ‚áß[j, 1] T ‚â° U ‚Üí ‚ä•) ‚Üí
                      ‚àÄI,K,W. ‚á©[j]L ‚â° K.‚ìë{I}W ‚Üí d ‚â§ yinj j ‚Üí j < i ‚Üí K ‚ä¢ i-j-1 ~œµ ùêÖ*[yinj 0]‚¶ÉW‚¶Ñ.
#L #U @(f2_ind ‚Ä¶ rfw ‚Ä¶ L U) -L -U
#n #IH #L * *
[ -IH #k #_ #d #i #_ #j #H elim (H (‚ãÜk)) -H //
| -IH #j #_ #d #i #Hi0 #j0 #H <(nlift_inv_lref_be_SO ‚Ä¶ H) -j0
  /2 width=9 by cofrees_inv_lref_be/
| -IH #p #_ #d #i #_ #j #H elim (H (¬ßp)) -H //
| #a #J #W #U #Hn #d #i #H1 #j #H2 #I #K #V #HLK #Hdj #Hji destruct
  elim (cofrees_inv_bind ‚Ä¶ H1) -H1 #HW #HU
  elim (nlift_inv_bind ‚Ä¶ H2) -H2 [ -HU /3 width=9 by/ ]
  -HW #HnU lapply (IH ‚Ä¶ HU ‚Ä¶ HnU I K V ? ? ?)
  /2 width=1 by ldrop_drop, yle_succ, lt_minus_to_plus/ -a -I -J -L -W -U -d
  >minus_plus_plus_l //
| #J #W #U #Hn #d #i #H1 #j #H2 #I #K #V #HLK #Hdj #Hji destruct
  elim (cofrees_inv_flat ‚Ä¶ H1) -H1 #HW #HU
  elim (nlift_inv_flat ‚Ä¶ H2) -H2 [ /3 width=9 by/ ]
  #HnU @(IH ‚Ä¶ HU ‚Ä¶ HnU ‚Ä¶ HLK) // (**) (* full auto fails *)
]
qed-.

(* Advanced properties ******************************************************)

lemma cofrees_lref_skip: ‚àÄL,d,i,j. j < i ‚Üí yinj j < d ‚Üí L ‚ä¢ i ~œµ ùêÖ*[d]‚¶É#j‚¶Ñ.
#L #d #i #j #Hji #Hjd #X #H elim (cpys_inv_lref1_Y2 ‚Ä¶ H) -H
[ #H destruct /3 width=2 by lift_lref_lt, ex_intro/
| * #I #K #W1 #W2 #Hdj elim (ylt_yle_false ‚Ä¶ Hdj) -i -I -L -K -W1 -W2 -X //
]
qed.

lemma cofrees_lref_lt: ‚àÄL,d,i,j. i < j ‚Üí L ‚ä¢ i ~œµ ùêÖ*[d]‚¶É#j‚¶Ñ.
#L #d #i #j #Hij #X #H elim (cpys_inv_lref1_Y2 ‚Ä¶ H) -H
[ #H destruct /3 width=2 by lift_lref_ge_minus, ex_intro/
| * #I #K #V1 #V2 #_ #_ #_ #H -I -L -K -V1 -d
  elim (lift_split ‚Ä¶ H i j) /2 width=2 by lt_to_le, ex_intro/
]
qed.

lemma cofrees_lref_gt: ‚àÄI,L,K,W,d,i,j. j < i ‚Üí ‚á©[j] L ‚â° K.‚ìë{I}W ‚Üí 
                       K ‚ä¢ (i-j-1) ~œµ ùêÖ*[O]‚¶ÉW‚¶Ñ ‚Üí L ‚ä¢ i ~œµ ùêÖ*[d]‚¶É#j‚¶Ñ.
#I #L #K #W1 #d #i #j #Hji #HLK #HW1 #X #H elim (cpys_inv_lref1_Y2 ‚Ä¶ H) -H
[ #H destruct /3 width=2 by lift_lref_lt, ex_intro/
| * #I0 #K0 #W0 #W2 #Hdj #HLK0 #HW12 #HW2 lapply (ldrop_mono ‚Ä¶ HLK0 ‚Ä¶ HLK) -L
  #H destruct elim (HW1 ‚Ä¶ HW12) -I -K -W1 -d
  #V2 #HVW2 elim (lift_trans_le ‚Ä¶ HVW2 ‚Ä¶ HW2) -W2 //
  >minus_plus <plus_minus_m_m /2 width=2 by ex_intro/
]
qed.

lemma cofrees_lref_free: ‚àÄL,d,i,j. |L| ‚â§ j ‚Üí j < i ‚Üí L ‚ä¢ i ~œµ ùêÖ*[d]‚¶É#j‚¶Ñ.
#L #d #i #j #Hj #Hji #X #H elim (cpys_inv_lref1_Y2 ‚Ä¶ H) -H
[ #H destruct /3 width=2 by lift_lref_lt, ex_intro/
| * #I #K #W1 #W2 #_ #HLK lapply (ldrop_fwd_length_lt2 ‚Ä¶ HLK) -I
  #H elim (lt_refl_false j) -d -i -K -W1 -W2 -X /2 width=3 by lt_to_le_to_lt/
]
qed.

(* Advanced negated inversion lemmas ****************************************)

lemma frees_inv_lref_gt: ‚àÄL,d,i,j. j < i ‚Üí (L ‚ä¢ i ~œµ ùêÖ*[d]‚¶É#j‚¶Ñ ‚Üí ‚ä•) ‚Üí
                         ‚àÉ‚àÉI,K,W. ‚á©[j] L ‚â° K.‚ìë{I}W & (K ‚ä¢ (i-j-1) ~œµ ùêÖ*[0]‚¶ÉW‚¶Ñ ‚Üí ‚ä•) & d ‚â§ yinj j.
#L #d #i #j #Hji #H elim (ylt_split j d) #Hjd
[ elim H -H /2 width=6 by cofrees_lref_skip/ 
| elim (lt_or_ge j (|L|)) #Hj
  [ elim (ldrop_O1_lt ‚Ä¶ Hj) -Hj /4 width=10 by cofrees_lref_gt, ex3_3_intro/
  | elim H -H /2 width=6 by cofrees_lref_free/
  ]
]
qed-.

lemma frees_inv_lref_free: ‚àÄL,d,i,j. (L ‚ä¢ i ~œµ ùêÖ*[d]‚¶É#j‚¶Ñ  ‚Üí ‚ä•) ‚Üí |L| ‚â§ j ‚Üí j = i.
#L #d #i #j #H #Hj elim (lt_or_eq_or_gt i j) //
#Hij elim H -H /2 width=6 by cofrees_lref_lt, cofrees_lref_free/
qed-.

lemma frees_inv_gen: ‚àÄL,U,d,i. (L ‚ä¢ i ~œµ ùêÖ*[d]‚¶ÉU‚¶Ñ ‚Üí ‚ä•) ‚Üí
                     ‚àÉ‚àÉU0.  ‚¶É‚ãÜ, L‚¶Ñ ‚ä¢ U ‚ñ∂*[d, ‚àû] U0 & (‚àÄT. ‚áß[i, 1] T ‚â° U0 ‚Üí ‚ä•).
#L #U @(f2_ind ‚Ä¶ rfw ‚Ä¶ L U) -L -U
#n #IH #L * *
[ -IH #k #_ #d #i #H elim H -H //
| #j #Hn #d #i #H elim (lt_or_eq_or_gt i j)
  [ -n #Hij elim H -H /2 width=5 by cofrees_lref_lt/
  | -H -n #H destruct /3 width=7 by lift_inv_lref2_be, ex2_intro/
  | #Hji elim (frees_inv_lref_gt ‚Ä¶ H) // -H
    #I #K #W1 #HLK #H #Hdj elim (IH ‚Ä¶ H) /2 width=3 by ldrop_fwd_rfw/ -H -n
    #W2 #HW12 #HnW2 elim (lift_total W2 0 (j+1))
    #U2 #HWU2 @(ex2_intro ‚Ä¶ U2) /2 width=7 by cpys_subst_Y2/ -I -L -K -W1 -d
    #T2 #HTU2 elim (lift_div_le ‚Ä¶ HWU2 (i-j-1) 1 T2) /2 width=2 by/ -W2
    >minus_plus <plus_minus_m_m //
  ]
| -IH #p #_ #d #i #H elim H -H //
| #a #I #W #U #Hn #d #i #H elim (frees_inv_bind ‚Ä¶ H) -H
  #H elim (IH ‚Ä¶ H) // -H -n
  /4 width=9 by cpys_bind, nlift_bind_dx, nlift_bind_sn, ex2_intro/
| #I #W #U #Hn #d #i #H elim (frees_inv_flat ‚Ä¶ H) -H
  #H elim (IH ‚Ä¶ H) // -H -n
  /4 width=9 by cpys_flat, nlift_flat_dx, nlift_flat_sn, ex2_intro/
]
qed-.

lemma frees_ind: ‚àÄL,d,i. ‚àÄR:predicate term.
                 (‚àÄU1. (‚àÄT1. ‚áß[i, 1] T1 ‚â° U1 ‚Üí ‚ä•) ‚Üí R U1) ‚Üí 
                 (‚àÄU1,U2. ‚¶É‚ãÜ, L‚¶Ñ ‚ä¢ U1 ‚ñ∂[d, ‚àû] U2 ‚Üí (L ‚ä¢ i ~œµ ùêÖ*[d]‚¶ÉU2‚¶Ñ ‚Üí ‚ä•) ‚Üí R U2 ‚Üí R U1) ‚Üí
                 ‚àÄU. (L ‚ä¢ i ~œµ ùêÖ*[d]‚¶ÉU‚¶Ñ ‚Üí ‚ä•) ‚Üí R U.
#L #d #i #R #IH1 #IH2 #U1 #H elim (frees_inv_gen ‚Ä¶ H) -H
#U2 #H #HnU2 @(cpys_ind_dx ‚Ä¶ H) -U1 /4 width=8 by cofrees_inv_gen/
qed-.

(* Advanced negated properties **********************************************)

lemma frees_be: ‚àÄI,L,K,W,j. ‚á©[j]L ‚â° K.‚ìë{I}W ‚Üí
                ‚àÄi. j < i ‚Üí (K ‚ä¢ i-j-1 ~œµ ùêÖ*[yinj 0]‚¶ÉW‚¶Ñ ‚Üí ‚ä•) ‚Üí
                ‚àÄU. (‚àÄT. ‚áß[j, 1] T ‚â° U ‚Üí ‚ä•) ‚Üí
                ‚àÄd. d ‚â§ yinj j ‚Üí (L ‚ä¢ i ~œµ ùêÖ*[d]‚¶ÉU‚¶Ñ ‚Üí ‚ä•).
/4 width=11 by cofrees_inv_be/ qed-.

(* Relocation properties ****************************************************)

lemma cofrees_lift_be: ‚àÄd0,e0,i. d0 ‚â§ i ‚Üí i ‚â§ d0 + e0 ‚Üí
                       ‚àÄL,K,s. ‚á©[s, d0, e0+1] L ‚â° K ‚Üí ‚àÄT,U. ‚áß[d0, e0+1] T ‚â° U ‚Üí
                       ‚àÄd. L ‚ä¢ i ~œµ ùêÖ*[d]‚¶ÉU‚¶Ñ.
#d0 #e0 #i #Hd0i #Hide0 #L #K #s #HLK #T1 #U1 #HTU1 #d #U2 #HU12
elim (yle_split d0 d) #H1
[ elim (yle_split d (d0+e0+1)) #H2
  [ letin cpys_inv ‚âù cpys_inv_lift1_ge_up
  | letin cpys_inv ‚âù cpys_inv_lift1_ge
  ]
| letin cpys_inv ‚âù cpys_inv_lift1_be
]
elim (cpys_inv ‚Ä¶ HU12 ‚Ä¶ HLK ‚Ä¶ HTU1) // #T2 #_ #HTU2 -s -L -K -U1 -T1 -d
elim (lift_split ‚Ä¶ HTU2 i e0) /2 width=2 by ex_intro/
qed.

lemma cofrees_lift_ge: ‚àÄd0,e0,i. d0 + e0 ‚â§ i ‚Üí
                       ‚àÄL,K,s. ‚á©[s, d0, e0] L ‚â° K ‚Üí ‚àÄT,U. ‚áß[d0, e0] T ‚â° U ‚Üí
                       ‚àÄd. K ‚ä¢ i-e0 ~œµ ùêÖ*[d-yinj e0]‚¶ÉT‚¶Ñ ‚Üí L ‚ä¢ i ~œµ ùêÖ*[d]‚¶ÉU‚¶Ñ.
#d0 #e0 #i #Hde0i #L #K #s #HLK #T1 #U1 #HTU1 #d #HT1 #U2 #HU12
elim (le_inv_plus_l ‚Ä¶ Hde0i) -Hde0i #Hd0ie0 #He0i
elim (yle_split d0 d) #H1
[ elim (yle_split d (d0+e0)) #H2
  [ elim (cpys_inv_lift1_ge_up ‚Ä¶ HU12 ‚Ä¶ HLK ‚Ä¶ HTU1) // >yplus_inj >yminus_Y_inj #T2 #HT12
    lapply (cpys_weak ‚Ä¶ HT12 (d-yinj e0) (‚àû) ? ?) /2 width=1 by yle_plus2_to_minus_inj2/ -HT12
  | elim (cpys_inv_lift1_ge ‚Ä¶ HU12 ‚Ä¶ HLK ‚Ä¶ HTU1) // #T2
  ]
| elim (cpys_inv_lift1_be ‚Ä¶ HU12 ‚Ä¶ HLK ‚Ä¶ HTU1) // >yminus_Y_inj #T2 #HT12
  lapply (cpys_weak ‚Ä¶ HT12 (d-yinj e0) (‚àû) ? ?) // -HT12
]
-s -L #HT12 #HTU2
elim (HT1 ‚Ä¶ HT12) -T1 #V2 #HVT2
elim (lift_trans_le ‚Ä¶ HVT2 ‚Ä¶ HTU2 ?) // <plus_minus_m_m /2 width=2 by ex_intro/
qed.
