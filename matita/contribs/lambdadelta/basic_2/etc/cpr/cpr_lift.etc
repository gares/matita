(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/unfold/tpss_lift.ma".
include "basic_2/reducibility/tpr_lift.ma".
include "basic_2/reducibility/cpr.ma".

(* CONTEXT-SENSITIVE PARALLEL REDUCTION ON TERMS ****************************)

(* Advanced properties ******************************************************)

lemma cpr_cdelta: ‚àÄL,K,V1,W1,W2,i.
                  ‚á©[0, i] L ‚â° K. ‚ììV1 ‚Üí K ‚ä¢ V1 ‚ñ∂* [0, |L| - i - 1] W1 ‚Üí
                  ‚áß[0, i + 1] W1 ‚â° W2 ‚Üí L ‚ä¢ #i ‚û° W2.
#L #K #V1 #W1 #W2 #i #HLK #HVW1 #HW12
lapply (ldrop_fwd_ldrop2_length ‚Ä¶ HLK) #Hi
@ex2_intro [2: // | skip | @tpss_subst /width=6/ ] (**) (* /3 width=6/ is too slow *)
qed.

lemma cpr_abst: ‚àÄL,V1,V2. L ‚ä¢ V1 ‚û° V2 ‚Üí ‚àÄV,T1,T2. L.‚ìõV ‚ä¢ T1 ‚û° T2 ‚Üí
                          ‚àÄa,I. L ‚ä¢ ‚ìë{a,I}V1. T1 ‚û° ‚ìë{a,I}V2. T2.
#L #V1 #V2 * #V0 #HV10 #HV02 #V #T1 #T2 * #T0 #HT10 #HT02 #a #I
lapply (tpss_inv_S2 ‚Ä¶ HT02 L V ?) -HT02 // #HT02
lapply (tpss_lsubr_trans ‚Ä¶ HT02 (L.‚ìë{I}V2) ?) -HT02 /2 width=1/ #HT02
@(ex2_intro ‚Ä¶ (‚ìë{a,I}V0.T0)) /2 width=1/ (* explicit constructors *)
qed.

lemma cpr_beta: ‚àÄa,L,V1,V2,W,T1,T2.
                L ‚ä¢ V1 ‚û° V2 ‚Üí L.‚ìõW ‚ä¢ T1 ‚û° T2 ‚Üí L ‚ä¢ ‚ìêV1.‚ìõ{a}W.T1 ‚û° ‚ìì{a}V2.T2.
#a #L #V1 #V2 #W #T1 #T2 * #V #HV1 #HV2 * #T #HT1 #HT2
lapply (tpss_inv_S2 ‚Ä¶ HT2 L W ?) -HT2 // #HT2
lapply (tpss_lsubr_trans ‚Ä¶ HT2 (L.‚ììV2) ?) -HT2 /2 width=1/ #HT2
@(ex2_intro ‚Ä¶ (‚ìì{a}V.T)) /2 width=1/ (**) (* explicit constructor, /3/ is too slow *)
qed.

lemma cpr_beta_dx: ‚àÄa,L,V1,V2,W,T1,T2.
                   V1 ‚û° V2 ‚Üí L.‚ìõW ‚ä¢ T1 ‚û° T2 ‚Üí L ‚ä¢ ‚ìêV1.‚ìõ{a}W.T1 ‚û° ‚ìì{a}V2.T2.
/3 width=1/ qed.

(* Advanced inversion lemmas ************************************************)

(* Basic_1: was: pr2_gen_lref *)
lemma cpr_inv_lref1: ‚àÄL,T2,i. L ‚ä¢ #i ‚û° T2 ‚Üí
                     T2 = #i ‚à®
                     ‚àÉ‚àÉK,V1,T1. ‚á©[0, i] L ‚â° K. ‚ììV1 &
                                K ‚ä¢ V1 ‚ñ∂* [0, |L| - i - 1] T1 &
                                ‚áß[0, i + 1] T1 ‚â° T2 &
                                i < |L|.
#L #T2 #i * #X #H
>(tpr_inv_atom1 ‚Ä¶ H) -H #H
elim (tpss_inv_lref1 ‚Ä¶ H) -H /2 width=1/
* /3 width=6/
qed-.

(* Basic_1: was pr2_gen_abbr *)
lemma cpr_inv_abbr1: ‚àÄa,L,V1,T1,U2. L ‚ä¢ ‚ìì{a}V1. T1 ‚û° U2 ‚Üí
                     (‚àÉ‚àÉV,V2,T2. V1 ‚û° V & L ‚ä¢ V ‚ñ∂* [O, |L|] V2 &
                                 L. ‚ììV ‚ä¢ T1 ‚û° T2 &
                                 U2 = ‚ìì{a}V2. T2
                      ) ‚à®
                      ‚àÉ‚àÉT2. L.‚ììV1 ‚ä¢ T1 ‚û° T2 & ‚áß[0,1] U2 ‚â° T2 & a = true.
#a #L #V1 #T1 #Y * #X #H1 #H2
elim (tpr_inv_abbr1 ‚Ä¶ H1) -H1 *
[ #V #T #T0 #HV1 #HT1 #HT0 #H destruct
  elim (tpss_inv_bind1 ‚Ä¶ H2) -H2 #V2 #T2 #HV2 #HT02 #H destruct
  lapply (tps_lsubr_trans ‚Ä¶ HT0 (L. ‚ììV) ?) -HT0 /2 width=1/ #HT0
  lapply (tps_weak_full ‚Ä¶ HT0) -HT0 #HT0
  lapply (tpss_lsubr_trans ‚Ä¶ HT02 (L. ‚ììV) ?) -HT02 /2 width=1/ #HT02
  lapply (tpss_weak_full ‚Ä¶ HT02) -HT02 #HT02
  lapply (tpss_strap2 ‚Ä¶ HT0 HT02) -T0 /4 width=7/
| #T2 #HT12 #HXT2 #H destruct
  elim (lift_total Y 0 1) #Z #HYZ
  lapply (tpss_lift_ge ‚Ä¶ H2 (L.‚ììV1) ‚Ä¶ HXT2 ‚Ä¶ HYZ) -X // /2 width=1/ #H
  lapply (cpr_intro ‚Ä¶ HT12 ‚Ä¶ H) -T2 /3 width=3/
]
qed-.

(* Basic_1: was: pr2_gen_abst *)
lemma cpr_inv_abst1: ‚àÄa,L,V1,T1,U2. L ‚ä¢ ‚ìõ{a}V1. T1 ‚û° U2 ‚Üí ‚àÄI,W.
                     ‚àÉ‚àÉV2,T2. L ‚ä¢ V1 ‚û° V2 & L. ‚ìë{I} W ‚ä¢ T1 ‚û° T2 & U2 = ‚ìõ{a}V2. T2.
#a #L #V1 #T1 #Y * #X #H1 #H2 #I #W
elim (tpr_inv_abst1 ‚Ä¶ H1) -H1 #V #T #HV1 #HT1 #H destruct
elim (tpss_inv_bind1 ‚Ä¶ H2) -H2 #V2 #T2 #HV2 #HT2 #H destruct
lapply (tpss_lsubr_trans ‚Ä¶ HT2 (L. ‚ìë{I} W) ?) -HT2 /2 width=1/ /4 width=5/
qed-.

(* Basic_1: was pr2_gen_appl *)
lemma cpr_inv_appl1: ‚àÄL,V1,U0,U2. L ‚ä¢ ‚ìêV1. U0 ‚û° U2 ‚Üí
                     ‚à®‚à® ‚àÉ‚àÉV2,T2.              L ‚ä¢ V1 ‚û° V2 & L ‚ä¢ U0 ‚û° T2 &
                                              U2 = ‚ìêV2. T2
                      | ‚àÉ‚àÉa,V2,W,T1,T2.       L ‚ä¢ V1 ‚û° V2 & L. ‚ììV2 ‚ä¢ T1 ‚û° T2 &
                                              U0 = ‚ìõ{a}W. T1 &
                                              U2 = ‚ìì{a}V2. T2
                      | ‚àÉ‚àÉa,V2,V,W1,W2,T1,T2. L ‚ä¢ V1 ‚û° V2 & L ‚ä¢ W1 ‚û° W2 & L. ‚ììW2 ‚ä¢ T1 ‚û° T2 &
                                              ‚áß[0,1] V2 ‚â° V &
                                              U0 = ‚ìì{a}W1. T1 &
                                              U2 = ‚ìì{a}W2. ‚ìêV. T2.
#L #V1 #U0 #Y * #X #H1 #H2
elim (tpr_inv_appl1 ‚Ä¶ H1) -H1 *
[ #V #U #HV1 #HU0 #H destruct
  elim (tpss_inv_flat1 ‚Ä¶ H2) -H2 #V2 #U2 #HV2 #HU2 #H destruct /4 width=5/
| #a #V #W #T0 #T #HV1 #HT0 #H #H1 destruct
  elim (tpss_inv_bind1 ‚Ä¶ H2) -H2 #V2 #T2 #HV2 #HT2 #H destruct
  lapply (tpss_weak ‚Ä¶ HT2 0 (|L|+1) ? ?) -HT2 // /4 width=9/
| #a #V0 #V #W #W0 #T #T0 #HV10 #HW0 #HT0 #HV0 #H #H1 destruct
  elim (tpss_inv_bind1 ‚Ä¶ H2) -H2 #W2 #X #HW02 #HX #HY destruct
  elim (tpss_inv_flat1 ‚Ä¶ HX) -HX #V2 #T2 #HV2 #HT2 #H destruct
  elim (tpss_inv_lift1_ge ‚Ä¶ HV2 ‚Ä¶ HV0 ?) -V // [3: /2 width=1/ |2: skip ] #V <minus_plus_m_m
  lapply (tpss_weak ‚Ä¶ HT2 0 (|L|+1) ? ?) -HT2 // /4 width=13/
]
qed-.

(* Note: the main property of simple terms *)
lemma cpr_inv_appl1_simple: ‚àÄL,V1,T1,U. L ‚ä¢ ‚ìêV1. T1 ‚û° U ‚Üí ùêí‚¶ÉT1‚¶Ñ ‚Üí
                            ‚àÉ‚àÉV2,T2. L ‚ä¢ V1 ‚û° V2 & L ‚ä¢ T1 ‚û° T2 &
                                     U = ‚ìêV2. T2.
#L #V1 #T1 #U #H #HT1
elim (cpr_inv_appl1 ‚Ä¶ H) -H *
[ /2 width=5/
| #a #V2 #W #W1 #W2 #_ #_ #H #_ destruct
  elim (simple_inv_bind ‚Ä¶ HT1)
| #a #V2 #V #W1 #W2 #U1 #U2 #_ #_ #_ #_ #H #_ destruct
  elim (simple_inv_bind ‚Ä¶ HT1)
]
qed-.

(* Advanced forward lemmas **************************************************)

lemma cpr_fwd_abst1: ‚àÄa,L,V1,T1,U2. L ‚ä¢ ‚ìõ{a}V1.T1 ‚û° U2 ‚Üí ‚àÄb,I,W.
                     ‚àÉ‚àÉV2,T2. L ‚ä¢ ‚ìë{b,I}W.T1 ‚û° ‚ìë{b,I}W.T2 &
                              U2 = ‚ìõ{a}V2.T2.
#a #L #V1 #T1 #U2 * #U #H #HU2 #b #I #W
elim (tpr_fwd_abst1 ‚Ä¶ H b I W) -H #V #T #HT1 #H destruct
elim (tpss_inv_bind1 ‚Ä¶ HU2) -HU2 #V2 #T2 #_ #HT2
lapply (tpss_lsubr_trans ‚Ä¶ HT2 (L.‚ìë{I}W) ?) -HT2 /2 width=1/ /4 width=5/
qed-.

(* Relocation properties ****************************************************)

(* Basic_1: was: pr2_lift *)
lemma cpr_lift: ‚àÄL,K,d,e. ‚á©[d, e] L ‚â° K ‚Üí
                ‚àÄT1,U1. ‚áß[d, e] T1 ‚â° U1 ‚Üí ‚àÄT2,U2. ‚áß[d, e] T2 ‚â° U2 ‚Üí
                K ‚ä¢ T1 ‚û° T2 ‚Üí L ‚ä¢ U1 ‚û° U2.
#L #K #d #e #HLK #T1 #U1 #HTU1 #T2 #U2 #HTU2 * #T #HT1 #HT2
elim (lift_total T d e) #U #HTU
lapply (tpr_lift ‚Ä¶ HT1 ‚Ä¶ HTU1 ‚Ä¶ HTU) -T1 #HU1
elim (lt_or_ge (|K|) d) #HKd
[ lapply (tpss_lift_le ‚Ä¶ HT2 ‚Ä¶ HLK HTU ‚Ä¶ HTU2) -T2 -T -HLK [ /2 width=2/ | /3 width=4/ ]
| lapply (tpss_lift_be ‚Ä¶ HT2 ‚Ä¶ HLK HTU ‚Ä¶ HTU2) -T2 -T -HLK // /3 width=4/
]
qed.

(* Basic_1: was: pr2_gen_lift *)
lemma cpr_inv_lift1: ‚àÄL,K,d,e. ‚á©[d, e] L ‚â° K ‚Üí
                     ‚àÄT1,U1. ‚áß[d, e] T1 ‚â° U1 ‚Üí ‚àÄU2. L ‚ä¢ U1 ‚û° U2 ‚Üí
                     ‚àÉ‚àÉT2. ‚áß[d, e] T2 ‚â° U2 & K ‚ä¢ T1 ‚û° T2.
#L #K #d #e #HLK #T1 #U1 #HTU1 #U2 * #U #HU1 #HU2
elim (tpr_inv_lift1 ‚Ä¶ HU1 ‚Ä¶ HTU1) -U1 #T #HTU #T1
elim (lt_or_ge (|L|) d) #HLd
[ elim (tpss_inv_lift1_le ‚Ä¶ HU2 ‚Ä¶ HLK ‚Ä¶ HTU ?) -U -HLK /2 width=2/
  /3 width=7 by ex2_intro, cpr_intro/
| elim (lt_or_ge (|L|) (d + e)) #HLde
  [ elim (tpss_inv_lift1_be_up ‚Ä¶ HU2 ‚Ä¶ HLK ‚Ä¶ HTU ? ?) -U -HLK // /2 width=2/
    /3 width=7 by ex2_intro, cpr_intro/
  | elim (tpss_inv_lift1_be ‚Ä¶ HU2 ‚Ä¶ HLK ‚Ä¶ HTU ? ?) -U -HLK //
    /3 width=7 by ex2_intro, cpr_intro/
  ]
]
qed.
