(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

notation "hvbox( ‚¶É term 46 h , break term 46 L ‚¶Ñ ‚ä¢ break term 46 T1 ‚Ä¢ ‚û° * break [ term 46 g ] break term 46 T2 )"
   non associative with precedence 45
   for @{ 'XPRedStar $h $g $L $T1 $T2 }.

notation "hvbox( ‚¶É term 46 h , break term 46 L ‚¶Ñ ‚ä¢ ‚Ä¢ ‚¨ä * break [ term 46 g ] break term 46 T2 )"
   non associative with precedence 45
   for @{ 'XSN $h $g $L $T }.

include "basic_2/static/lsubss.ma".
include "basic_2/reducibility/xpr.ma".
(*
include "basic_2/reducibility/cnf.ma".
*)
(* EXTENDED PARALLEL COMPUTATION ON TERMS ***********************************)

definition xprs: ‚àÄh. sd h ‚Üí lenv ‚Üí relation term ‚âù
                 Œªh,g,L. TC ‚Ä¶ (xpr h g L).

interpretation "extended parallel computation (term)"
   'XPRedStar h g L T1 T2 = (xprs h g L T1 T2).

(* Basic eliminators ********************************************************)

lemma xprs_ind: ‚àÄh,g,L,T1. ‚àÄR:predicate term. R T1 ‚Üí
                (‚àÄT,T2. ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚Ä¢‚û°*[g] T ‚Üí ‚¶Éh, L‚¶Ñ ‚ä¢ T ‚Ä¢‚û°[g] T2 ‚Üí R T ‚Üí R T2) ‚Üí
                ‚àÄT2. ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚Ä¢‚û°*[g] T2 ‚Üí R T2.
#h #g #L #T1 #R #HT1 #IHT1 #T2 #HT12
@(TC_star_ind ‚Ä¶ HT1 IHT1 ‚Ä¶ HT12) //
qed-.

lemma xprs_ind_dx: ‚àÄh,g,L,T2. ‚àÄR:predicate term. R T2 ‚Üí
                   (‚àÄT1,T. ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚Ä¢‚û°[g] T ‚Üí ‚¶Éh, L‚¶Ñ ‚ä¢ T ‚Ä¢‚û°*[g] T2 ‚Üí R T ‚Üí R T1) ‚Üí
                   ‚àÄT1. ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚Ä¢‚û°*[g] T2 ‚Üí R T1.
#h #g #L #T2 #R #HT2 #IHT2 #T1 #HT12
@(TC_star_ind_dx ‚Ä¶ HT2 IHT2 ‚Ä¶ HT12) //
qed-.

(* Basic properties *********************************************************)

lemma xprs_refl: ‚àÄh,g,L. reflexive ‚Ä¶ (xprs h g L).
/2 width=1/ qed.

lemma xprs_strap1: ‚àÄh,g,L,T1,T,T2.
                   ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚Ä¢‚û°*[g] T ‚Üí ‚¶Éh, L‚¶Ñ ‚ä¢ T ‚Ä¢‚û°[g] T2 ‚Üí ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚Ä¢‚û°*[g] T2.
/2 width=3/ qed.

lemma xprs_strap2: ‚àÄh,g,L,T1,T,T2.
                   ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚Ä¢‚û°[g] T ‚Üí ‚¶Éh, L‚¶Ñ ‚ä¢ T ‚Ä¢‚û°*[g] T2 ‚Üí ‚¶Éh, L‚¶Ñ ‚ä¢ T1 ‚Ä¢‚û°*[g] T2.
/2 width=3/ qed.

(* Basic inversion lemmas ***************************************************)
(*
axiom xprs_inv_cnf1: ‚àÄL,T,U. L ‚ä¢ T ‚û°* U ‚Üí L ‚ä¢ ùêç‚¶ÉT‚¶Ñ ‚Üí T = U.
#L #T #U #H @(xprs_ind_dx ‚Ä¶ H) -T //
#T0 #T #H1T0 #_ #IHT #H2T0
lapply (H2T0 ‚Ä¶ H1T0) -H1T0 #H destruct /2 width=1/
qed-.
*)
