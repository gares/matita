(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/substitution/llneq_alt.ma".
include "basic_2/computation/lpxs_ldrop.ma".
include "basic_2/computation/lpxs_cpxs.ma".

(* SN EXTENDED PARALLEL COMPUTATION FOR LOCAL ENVIRONMENTS ******************)

(* Forward lemmas on negated lazy equivalence for local environments ********)

lemma lpxs_llneq_fwd_cpxs: ∀h,g,G,L1,L2,T,d. L1 ⧣⧣[T, d] L2 → ⦃G, L1⦄ ⊢ ➡*[h, g] L2 →
                           ∃∃T1,T2. ⦃G, L1⦄ ⊢ T ▶*[d, ∞] T1 & ⦃G, L2⦄ ⊢ T ▶*[d, ∞] T2 &
                                    ⦃G, L1⦄ ⊢ T1 ➡*[h, g] T2 & (T1 = T2 → ⊥).
#h #g #G #L1 #L2 #T #d #H elim H -L1 -L2 -T -d
[ #I1 #I2 #L1 #L2 #K1 #K2 #V1 #V2 #d #i #Hdi #HLK1 #HLK2 #_ #HnV12 #HL12
  elim (lpxs_ldrop_conf … HLK1 … HL12) -HL12 #Y #H #HY
  elim (lpxs_inv_pair1 … H) -H #Z #X #_ #HV12 #H destruct
  lapply (ldrop_mono … HY … HLK2) -HY #H destruct
  lapply (ldrop_fwd_drop2 … HLK1) #H2LK1
  elim (lift_total V1 0 (i+1)) #T1 #HVT1
  elim (lift_total V2 0 (i+1)) #T2 #HVT2
  @(ex4_2_intro … T1 T2) /3 width=10 by cpxs_lift, cpys_subst, lift_inj/ (**) (* explicit constructor *)
| #I1 #I2 #L1 #L2 #K1 #K2 #V #d #i #Hdi #HLK1 #HLK2 #_ #IHK12 #HL12
  elim (lpxs_ldrop_conf … HLK1 … HL12) -HL12 #Y #H #HY
  elim (lpxs_inv_pair1 … H) -H #Z #X #HK12 #_ #H destruct
  lapply (ldrop_mono … HY … HLK2) -HY #H destruct
  elim (IHK12 HK12) -IHK12 -HK12 #V1 #V2 #HV1 #HV2 #HV12 #HnV12
  lapply (ldrop_fwd_drop2 … HLK1) #H2LK1
  elim (lift_total V1 0 (i+1)) #T1 #HVT1
  elim (lift_total V2 0 (i+1)) #T2 #HVT2
  @(ex4_2_intro … T1 T2) /3 width=10 by cpxs_lift, cpys_subst_Y2, lift_inj/ (**) (* explicit constructor *)
| #a #I #L1 #L2 #V #T #d #_ #IHV #HL12 elim (IHV HL12) -IHV -HL12
  #V1 #V2 #HV1 #HV2 #HV12 #HnV12
  @(ex4_2_intro … (ⓑ{a,I}V1.T) (ⓑ{a,I}V2.T)) /2 width=1 by cpys_bind, cpxs_pair_sn/
  #H destruct /2 width=1 by/
| #a #I #L1 #L2 #V #T #d #_ #IHT #HL12 elim (IHT ?) /2 width=1 by lpxs_pair_refl/ -IHT -HL12
  #T1 #T2 #HT1 #HT2 #HT12 #HnT12
  @(ex4_2_intro … (ⓑ{a,I}V.T1) (ⓑ{a,I}V.T2)) /2 width=1 by cpys_bind, cpxs_bind_dx/
  #H destruct /2 width=1 by/
| #I #L1 #L2 #V #T #d #_ #IHV #HL12 elim (IHV HL12) -IHV -HL12
  #V1 #V2 #HV1 #HV2 #HV12 #HnV12
  @(ex4_2_intro … (ⓕ{I}V1.T) (ⓕ{I}V2.T)) /2 width=1 by cpys_flat, cpxs_pair_sn/
  #H destruct /2 width=1 by/
| #I #L1 #L2 #V #T #d #_ #IHT #HL12 elim (IHT HL12) -IHT -HL12
  #T1 #T2 #HT1 #HT2 #HT12 #HnT12
  @(ex4_2_intro … (ⓕ{I}V.T1) (ⓕ{I}V.T2)) /2 width=1 by cpys_flat, cpxs_flat_dx/
  #H destruct /2 width=1 by/
]
qed-.

lemma lpxs_nlleq_fwd_cpxs: ∀h,g,G,L1,L2,T,d. ⦃G, L1⦄ ⊢ ➡*[h, g] L2 →
                           (L1 ⋕[T, d] L2 → ⊥) →
                           ∃∃T1,T2. ⦃G, L1⦄ ⊢ T ▶*[d, ∞] T1 & ⦃G, L2⦄ ⊢ T ▶*[d, ∞] T2 &
                                    ⦃G, L1⦄ ⊢ T1 ➡*[h, g] T2 & (T1 = T2 → ⊥).
/5 width=4 by lpxs_llneq_fwd_cpxs, lpxs_fwd_length, llneq_llneqa, conj/ qed-.
