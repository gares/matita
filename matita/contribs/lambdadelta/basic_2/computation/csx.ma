(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "basic_2/notation/relations/sn_5.ma".
include "basic_2/reduction/cnx.ma".

(* CONTEXT-SENSITIVE EXTENDED STRONGLY NORMALIZING TERMS ********************)

definition csx: ‚àÄh. sd h ‚Üí relation3 genv lenv term ‚âù
                Œªh,g,G,L. SN ‚Ä¶ (cpx h g G L) (eq ‚Ä¶).

interpretation
   "context-sensitive extended strong normalization (term)"
   'SN h g G L T = (csx h g G L T).

(* Basic eliminators ********************************************************)

lemma csx_ind: ‚àÄh,g,G,L. ‚àÄR:predicate term.
               (‚àÄT1. ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] T1 ‚Üí
                     (‚àÄT2. ‚¶ÉG, L‚¶Ñ ‚ä¢ T1 ‚û°[h, g] T2 ‚Üí (T1 = T2 ‚Üí ‚ä•) ‚Üí R T2) ‚Üí
                     R T1
               ) ‚Üí
               ‚àÄT. ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] T ‚Üí R T.
#h #g #G #L #R #H0 #T1 #H elim H -T1
/5 width=1 by SN_intro/
qed-.

(* Basic properties *********************************************************)

(* Basic_1: was just: sn3_pr2_intro *)
lemma csx_intro: ‚àÄh,g,G,L,T1.
                 (‚àÄT2. ‚¶ÉG, L‚¶Ñ ‚ä¢ T1 ‚û°[h, g] T2 ‚Üí (T1 = T2 ‚Üí ‚ä•) ‚Üí ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] T2) ‚Üí
                 ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] T1.
/4 width=1 by SN_intro/ qed.

lemma csx_cpx_trans: ‚àÄh,g,G,L,T1. ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] T1 ‚Üí
                     ‚àÄT2. ‚¶ÉG, L‚¶Ñ ‚ä¢ T1 ‚û°[h, g] T2 ‚Üí ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] T2.
#h #g #G #L #T1 #H @(csx_ind ‚Ä¶ H) -T1 #T1 #HT1 #IHT1 #T2 #HLT12
elim (eq_term_dec T1 T2) #HT12 destruct /3 width=4 by/
qed-.

(* Basic_1: was just: sn3_nf2 *)
lemma cnx_csx: ‚àÄh,g,G,L,T. ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚û°[h, g] ùêç‚¶ÉT‚¶Ñ ‚Üí ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] T.
/2 width=1 by NF_to_SN/ qed.

lemma csx_sort: ‚àÄh,g,G,L,k. ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] ‚ãÜk.
#h #g #G #L #k elim (deg_total h g k)
#l generalize in match k; -k @(nat_ind_plus ‚Ä¶ l) -l /3 width=6 by cnx_csx, cnx_sort/
#l #IHl #k #Hkl lapply (deg_next_SO ‚Ä¶ Hkl) -Hkl
#Hkl @csx_intro #X #H #HX elim (cpx_inv_sort1 ‚Ä¶ H) -H
[ #H destruct elim HX //
| -HX * #l0 #_ #H destruct -l0 /2 width=1 by/
]
qed.

(* Basic_1: was just: sn3_cast *)
lemma csx_cast: ‚àÄh,g,G,L,W. ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] W ‚Üí
                ‚àÄT. ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] T ‚Üí ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] ‚ìùW.T.
#h #g #G #L #W #HW @(csx_ind ‚Ä¶ HW) -W #W #HW #IHW #T #HT @(csx_ind ‚Ä¶ HT) -T #T #HT #IHT
@csx_intro #X #H1 #H2
elim (cpx_inv_cast1 ‚Ä¶ H1) -H1
[ * #W0 #T0 #HLW0 #HLT0 #H destruct
  elim (eq_false_inv_tpair_sn ‚Ä¶ H2) -H2
  [ /3 width=3 by csx_cpx_trans/
  | -HLW0 * #H destruct /3 width=1 by/
  ]
|2,3: /3 width=3 by csx_cpx_trans/
]
qed.

(* Basic forward lemmas *****************************************************)

fact csx_fwd_pair_sn_aux: ‚àÄh,g,G,L,U. ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] U ‚Üí
                          ‚àÄI,V,T. U = ‚ë°{I}V.T ‚Üí ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] V.
#h #g #G #L #U #H elim H -H #U0 #_ #IH #I #V #T #H destruct
@csx_intro #V2 #HLV2 #HV2
@(IH (‚ë°{I}V2.T)) -IH /2 width=3 by cpx_pair_sn/ -HLV2
#H destruct /2 width=1 by/
qed-.

(* Basic_1: was just: sn3_gen_head *)
lemma csx_fwd_pair_sn: ‚àÄh,g,I,G,L,V,T. ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] ‚ë°{I}V.T ‚Üí ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] V.
/2 width=5 by csx_fwd_pair_sn_aux/ qed-.

fact csx_fwd_bind_dx_aux: ‚àÄh,g,G,L,U. ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] U ‚Üí
                          ‚àÄa,I,V,T. U = ‚ìë{a,I}V.T ‚Üí ‚¶ÉG, L.‚ìë{I}V‚¶Ñ ‚ä¢ ‚¨ä*[h, g] T.
#h #g #G #L #U #H elim H -H #U0 #_ #IH #a #I #V #T #H destruct
@csx_intro #T2 #HLT2 #HT2
@(IH (‚ìë{a,I}V.T2)) -IH /2 width=3 by cpx_bind/ -HLT2
#H destruct /2 width=1 by/
qed-.

(* Basic_1: was just: sn3_gen_bind *)
lemma csx_fwd_bind_dx: ‚àÄh,g,a,I,G,L,V,T. ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] ‚ìë{a,I}V.T ‚Üí ‚¶ÉG, L.‚ìë{I}V‚¶Ñ ‚ä¢ ‚¨ä*[h, g] T.
/2 width=4 by csx_fwd_bind_dx_aux/ qed-.

fact csx_fwd_flat_dx_aux: ‚àÄh,g,G,L,U. ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] U ‚Üí
                          ‚àÄI,V,T. U = ‚ìï{I}V.T ‚Üí ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] T.
#h #g #G #L #U #H elim H -H #U0 #_ #IH #I #V #T #H destruct
@csx_intro #T2 #HLT2 #HT2
@(IH (‚ìï{I}V.T2)) -IH /2 width=3 by cpx_flat/ -HLT2
#H destruct /2 width=1 by/
qed-.

(* Basic_1: was just: sn3_gen_flat *)
lemma csx_fwd_flat_dx: ‚àÄh,g,I,G,L,V,T. ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] ‚ìï{I}V.T ‚Üí ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] T.
/2 width=5 by csx_fwd_flat_dx_aux/ qed-.

lemma csx_fwd_bind: ‚àÄh,g,a,I,G,L,V,T. ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] ‚ìë{a,I}V.T ‚Üí
                    ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] V ‚àß ‚¶ÉG, L.‚ìë{I}V‚¶Ñ ‚ä¢ ‚¨ä*[h, g] T.
/3 width=3 by csx_fwd_pair_sn, csx_fwd_bind_dx, conj/ qed-.

lemma csx_fwd_flat: ‚àÄh,g,I,G,L,V,T. ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] ‚ìï{I}V.T ‚Üí
                    ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] V ‚àß ‚¶ÉG, L‚¶Ñ ‚ä¢ ‚¨ä*[h, g] T.
/3 width=3 by csx_fwd_pair_sn, csx_fwd_flat_dx, conj/ qed-.

(* Basic_1: removed theorems 14:
            sn3_cdelta
            sn3_gen_cflat sn3_cflat sn3_cpr3_trans sn3_shift sn3_change
            sn3_appl_cast sn3_appl_beta sn3_appl_lref sn3_appl_abbr
            sn3_appl_appls sn3_bind sn3_appl_bind sn3_appls_bind
*)
