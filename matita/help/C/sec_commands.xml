
<!-- ============ Commands ====================== -->
<chapter id="sec_commands">
 <title>Other commands</title>
 <sect1 id="command_alias">
   <title>alias</title>
   <para><userinput>alias id &quot;s&quot; = &quot;def&quot;</userinput></para>
   <para><userinput>alias symbol &quot;s&quot; (instance n) = &quot;def&quot;</userinput></para>
   <para><userinput>alias num (instance n) = &quot;def&quot;</userinput></para>
   <para>
     <variablelist>
       <varlistentry>
         <term>Synopsis:</term>
         <listitem>
           <para><emphasis role="bold">alias</emphasis>
            [<emphasis role="bold">id</emphasis> &qstring; <emphasis role="bold">=</emphasis> &qstring;
            | <emphasis role="bold">symbol</emphasis> &qstring; [<emphasis role="bold">(instance</emphasis> &nat;<emphasis role="bold">)</emphasis>] <emphasis role="bold">=</emphasis> &qstring;
            | <emphasis role="bold">num</emphasis> [<emphasis role="bold">(instance</emphasis> &nat;<emphasis role="bold">)</emphasis>] <emphasis role="bold">=</emphasis> &qstring;
            ]
           </para>
         </listitem>
       </varlistentry>
       <varlistentry>
         <term>Action:</term>
         <listitem>
           <para>Used to give an hint to the disambiguating parser.
            When the parser is faced to the identifier (or symbol)
            <command>s</command> or to any number, it will prefer
            interpretations that &quot;map <command>s</command> (or the
            number) to <command>def</command>&quot;. For identifiers,
            &quot;def&quot; is the URI of the interpretation.
            E.g.: <command>cic:/matita/nat/nat.ind#xpointer(1/1/1)</command>
            for the first constructor of the first inductive type defined
            in the block of inductive type(s)
            <command>cic:/matita/nat/nat.ind</command>.
            For symbols and numbers, &quot;def&quot; is the label used to
            mark the wanted
            <link linkend="interpretation">interpretation</link>.
           </para>
          <para>When a symbol or a number occurs several times in the
           term to be parsed, it is possible to give an hint only for the
           instance <command>n</command>. When the instance is omitted,
           the hint is valid for every occurrence.
          </para>
          <para>
           Hints are automatically inserted in the script by Matita every
           time the user is interactively asked a question to disambiguate
           a term. This way the user won't be posed the same question twice
           when the script will be executed again.</para>
         </listitem>
       </varlistentry>
     </variablelist>
   </para>
 </sect1>
 <sect1 id="command_check">
   <title>check</title>
   <para><userinput>check t</userinput></para>
   <para>
     <variablelist>
       <varlistentry>
         <term>Synopsis:</term>
         <listitem>
           <para><emphasis role="bold">check</emphasis> &sterm;</para>
         </listitem>
       </varlistentry>
       <varlistentry>
         <term>Action:</term>
         <listitem>
           <para>Opens a CIC browser window that shows <command>t</command>
            together with its type. The command is immediately removed from
            the script.</para>
         </listitem>
       </varlistentry>
     </variablelist>
   </para>
 </sect1>
 <!--
 <sect1 id="command_eval">
   <title>eval</title>
   <para><userinput>eval red on t</userinput></para>
   <para>
     <variablelist>
       <varlistentry>
         <term>Synopsis:</term>
         <listitem>
           <para><emphasis role="bold">eval</emphasis> 
            &reduction-kind; 
             <emphasis role="bold">on</emphasis>
             &term;</para>
         </listitem>
       </varlistentry>
       <varlistentry>
         <term>Action:</term>
         <listitem>
           <para>Opens a CIC browser window that shows 
             the reduct of 
             <command>t</command>
             together with its type.</para>
         </listitem>
       </varlistentry>
     </variablelist>
   </para>
 </sect1>
 -->
 <!--
 <sect1 id="command_prefer_coercion">
   <title>prefer coercion</title>
   <para><userinput>prefer coercion u</userinput></para>
   <para>
     <variablelist>
       <varlistentry>
         <term>Synopsis:</term>
         <listitem>
		 <para>
			 <emphasis role="bold">prefer coercion</emphasis> 
       (&uri; | &term;)
		 </para>
         </listitem>
       </varlistentry>
       <varlistentry>
         <term>Action:</term>
         <listitem>
           <para>The already declared coercion <command>u</command> 
             is preferred to other coercions with the same source and target.
           </para>
         </listitem>
       </varlistentry>
     </variablelist>
   </para>
 </sect1>
 -->
 <sect1 id="command_coercion">
   <title>coercion</title>
   <para><userinput>coercion nocomposites c : ty ≝ u on s : S to T</userinput></para>
   <para>
     <variablelist>
       <varlistentry>
         <term>Synopsis:</term>
         <listitem>
		 <para>
			 <emphasis role="bold">coercion</emphasis> 
			 [ <emphasis role="bold">nocomposites</emphasis> ] &id;
			 [ :  &term; <emphasis role="bold">≝</emphasis> &term;
			      <emphasis role="bold">on</emphasis>
			      &id; : &term;
			      <emphasis role="bold">to</emphasis> &term; ]
		 </para>
         </listitem>
       </varlistentry>
       <varlistentry>
         <term>Action:</term>
         <listitem>
	    <para>Declares <command>c</command> as an implicit coercion.
            If only <command>c</command> is given, <command>u</command>
	    is the constant named by <command>c</command>, 
	    <command>ty</command> its declared type,
	    <command>s</command> the name of the last variable abstracted in
	    in <command>ty</command>, <command>S</command> the type of
	    this last variable and <command>T</command> the target of
	    <command>ty</command>. The user can specify all these component to
	    have full control on how the coercion is indexed.
	    The type of the body of the coercion <command>u</command> must be
	    convertible to the declared one <command>ty</command>. Let it be
	    <command>∀x1:T1. … ∀x(n-1):T(n-1).Tn</command>.
	    Then <command>s</command> must be one of <command>x1</command> … 
	    <command>xn</command> (possibly prefixed by <command>_</command>
	    if the product is non dependent). Let <command>s</command>
	    be <command>xi</command> in the following. 
	    Then <command>S</command> must be <command>Ti</command>
	    where all bound variables are replaced by <command>?</command>,
	    and <command>T</command> must be <command>Tn</command>
            where all bound variable are replaced by <command>?</command>.
	    For example the following command
	    declares a coercions from vectors of any length to lists of
	    natural numbers.</para>

            <para><userinput>coercion nocomposites v2l : ∀n:nat.∀v:Vect nat n.
            List nat ≝ l_of_v on _v : Vect nat ? to List nat</userinput></para>


	    <para>Every time a term <command>x</command>
            of a type that matches <command>S</command>
	       (<command>Vect nat ?</command> here)	    
		    is used with an expected 
		    type that matches <command>T</command>
		    (<command>List nat</command> here), Matita
            automatically replaces <command>x</command> with
            <command>(u ? … ? x ? … ?)</command> to avoid a typing error.
            Note that the position of <command>x</command> is determined by
	    <command>s</command>.</para>

           <para>Implicit coercions are not displayed to the user:
            <command>(u ? … ? x)</command> is rendered simply
            as <command>x</command>.</para>

           <para>When a coercion <command>u</command> is declared
            from source <command>s</command> to target <command>t</command>
            and there is already a coercion <command>u'</command> of
            target <command>s</command> or source <command>t</command>,
            a composite implicit coercion is automatically computed
	    by Matita unless <emphasis role="bold">nocomposites</emphasis> 
	    is specified.</para>

            <para>Note that <command>Vect nat ?</command> can be replaced with
	    <command>Vect ? ?</command> to index the coercion is a loose way.</para>
         </listitem>
       </varlistentry>
     </variablelist>
   </para>
 </sect1>
 <!--
 <sect1 id="command_default">
   <title>default</title>
   <para><userinput>default &quot;s&quot; u<subscript>1</subscript> … u<subscript>n</subscript></userinput></para>
   <para>
     <variablelist>
       <varlistentry>
         <term>Synopsis:</term>
         <listitem>
           <para><emphasis role="bold">default</emphasis>
            &qstring; &uri; [&uri;]…
           </para>
         </listitem>
       </varlistentry>
       <varlistentry>
         <term>Action:</term>
         <listitem>
           <para>It registers a cluster of related definitions and
            theorems to be used by tactics and the rendering engine.
            Some functionalities of Matita are not available when some
            clusters have not been registered. Overloading a cluster
            registration is possible: the last registration will be the
            default one, but the previous ones are still in effect.</para>
           <para>
            <command>s</command> is an identifier of the cluster and
            <command>u<subscript>1</subscript> … u<subscript>n</subscript></command>
            are the URIs of the definitions and theorems of the cluster.
            The number <command>n</command> of required URIs depends on the
            cluster. The following clusters are supported.
           </para>
           <table>
            <title>clusters</title>
            <tgroup cols="6">
            <thead>
             <row>
              <entry>name</entry>
              <entry>expected object for 1st URI</entry>
              <entry>expected object for 2nd URI</entry>
              <entry>expected object for 3rd URI</entry>
              <entry>expected object for 4th URI</entry>
              <entry>expected object for 5th URI</entry>
              <entry>expected object for 6th URI</entry>
              <entry>expected object for 7th URI</entry>
              <entry>expected object for 8th URI</entry>
              <entry>expected object for 9th URI</entry>
              <entry>expected object for 10th URI</entry>
              <entry>expected object for 11th URI</entry>
             </row>
            </thead>
            <tbody>
             <row>
              <entry>equality</entry>
              <entry>an inductive type (say, of type <command>eq</command>) of type ∀A:Type.A <emphasis role="bold">→</emphasis> <emphasis role="bold">Prop</emphasis> with one family parameter and one constructor of type ∀x:A.eq A x</entry>
              <entry>a theorem of type <emphasis role="bold">∀</emphasis>A.<emphasis role="bold">∀</emphasis>x,y:A.eq A x y <emphasis role="bold">→</emphasis> eq A y x</entry>
              <entry>a theorem of type <emphasis role="bold">∀</emphasis>A.<emphasis role="bold">∀</emphasis>x,y,z:A.eq A x y <emphasis role="bold">→</emphasis> eq A y z <emphasis role="bold">→</emphasis> eq A x z</entry>
              <entry><emphasis role="bold">∀</emphasis>A.<emphasis role="bold">∀</emphasis>a.<emphasis role="bold">∀</emphasis> P:A <emphasis role="bold">→</emphasis> <emphasis role="bold">Prop</emphasis>.P x <emphasis role="bold">→</emphasis> <emphasis role="bold">∀</emphasis>y.eq A x y <emphasis role="bold">→</emphasis> P y</entry>
              <entry><emphasis role="bold">∀</emphasis>A.<emphasis role="bold">∀</emphasis>a.<emphasis role="bold">∀</emphasis> P:A <emphasis role="bold">→</emphasis> <emphasis role="bold">Prop</emphasis>.P x <emphasis role="bold">→</emphasis> <emphasis role="bold">∀</emphasis>y.eq A y x <emphasis role="bold">→</emphasis> P y</entry>
              <entry><emphasis role="bold">∀</emphasis>A.<emphasis role="bold">∀</emphasis>a.<emphasis role="bold">∀</emphasis> P:A <emphasis role="bold">→</emphasis> <emphasis role="bold">Set</emphasis>.P x <emphasis role="bold">→</emphasis> <emphasis role="bold">∀</emphasis>y.eq A x y <emphasis role="bold">→</emphasis> P y</entry>
              <entry><emphasis role="bold">∀</emphasis>A.<emphasis role="bold">∀</emphasis>a.<emphasis role="bold">∀</emphasis> P:A <emphasis role="bold">→</emphasis> <emphasis role="bold">Set</emphasis>.P x <emphasis role="bold">→</emphasis> <emphasis role="bold">∀</emphasis>y.eq A y x <emphasis role="bold">→</emphasis> P y</entry>
              <entry><emphasis role="bold">∀</emphasis>A.<emphasis role="bold">∀</emphasis>a.<emphasis role="bold">∀</emphasis> P:A <emphasis role="bold">→</emphasis> <emphasis role="bold">Type</emphasis>.P x <emphasis role="bold">→</emphasis> <emphasis role="bold">∀</emphasis>y.eq A x y <emphasis role="bold">→</emphasis> P y</entry>
              <entry><emphasis role="bold">∀</emphasis>A.<emphasis role="bold">∀</emphasis>a.<emphasis role="bold">∀</emphasis> P:A <emphasis role="bold">→</emphasis> <emphasis role="bold">Type</emphasis>.P x <emphasis role="bold">→</emphasis> <emphasis role="bold">∀</emphasis>y.eq A y x <emphasis role="bold">→</emphasis> P y</entry>
              <entry><emphasis role="bold">∀</emphasis>A.<emphasis role="bold">∀</emphasis>B.<emphasis role="bold">∀</emphasis> f:A <emphasis role="bold">→</emphasis> B.<emphasis role="bold">∀</emphasis>x,y:A.eq A x y <emphasis role="bold">→</emphasis> eq B (f x) (f y)</entry>
              <entry><emphasis role="bold">∀</emphasis>A.<emphasis role="bold">∀</emphasis>B.<emphasis role="bold">∀</emphasis> f:A <emphasis role="bold">→</emphasis> B.<emphasis role="bold">∀</emphasis>x,y:A.eq A x y <emphasis role="bold">→</emphasis> eq B (f y) (f x)</entry>
             </row>
             <row>
              <entry>true</entry>
              <entry>an inductive type of type <emphasis role="bold">Prop</emphasis> with only one constructor that has no arguments</entry>
              <entry/>
              <entry/>
              <entry/>
              <entry/>
             </row>
             <row>
              <entry>false</entry>
              <entry>an inductive type of type <emphasis role="bold">Prop</emphasis> without constructors</entry>
              <entry/>
              <entry/>
              <entry/>
              <entry/>
             </row>
             <row>
              <entry>absurd</entry>
              <entry>a theorem of type <emphasis role="bold">∀</emphasis>A:Prop.<emphasis role="bold">∀</emphasis>B:Prop.A <emphasis role="bold">→</emphasis> Not A <emphasis role="bold">→</emphasis> B</entry>
              <entry/>
              <entry/>
              <entry/>
              <entry/>
             </row>
            </tbody>
            </tgroup>
           </table>
         </listitem>
       </varlistentry>
     </variablelist>
   </para>
 </sect1>
 -->
 <!--
 <sect1 id="command_hint">
   <title>hint</title>
   <para><userinput>hint</userinput></para>
   <para>
     <variablelist>
       <varlistentry>
         <term>Synopsis:</term>
         <listitem>
           <para><emphasis role="bold">hint</emphasis>
           </para>
         </listitem>
       </varlistentry>
       <varlistentry>
         <term>Action:</term>
         <listitem>
           <para>Displays a list of theorems that can be successfully
            applied to the current selected sequent. The command is
            removed from the script, but the window that displays the
            theorems allow to add to the script the application of the
            selected theorem.
           </para>
         </listitem>
       </varlistentry>
     </variablelist>
   </para>
 </sect1>
 -->
 <sect1 id="command_include">
   <title>include</title>
   <para><userinput>include &quot;s&quot;</userinput></para>
   <para>
     <variablelist>
       <varlistentry>
         <term>Synopsis:</term>
         <listitem>
           <para><emphasis role="bold">include</emphasis> &qstring;</para>
         </listitem>
       </varlistentry>
       <varlistentry>
         <term>Action:</term>
         <listitem>
           <para>Every <link linkend="command_coercion">coercion</link>,
            <link linkend="notation">notation</link> and
            <link linkend="interpretation">interpretation</link> that was active
            when the file <command>s</command> was compiled last time
            is made active. The same happens for declarations of
            <link linkend="command_default">default definitions and
            theorems</link> and disambiguation
            hints (<link linkend="command_alias">aliases</link>).
            On the contrary, theorem and definitions declared in a file can be
           immediately used without including it.</para>
           <para>The file <command>s</command> is automatically compiled
	   if it is not compiled yet.
          </para>
          <para>
          If the file <command>s</command> was already included, either
          directly or recursively, the commands does nothing.
          </para>
         </listitem>
       </varlistentry>
     </variablelist>
   </para>
 </sect1>
 <sect1 id="command_include_alias">
   <title>include alias</title>
   <para><userinput>include alias &quot;s&quot;</userinput></para>
   <para>
     <variablelist>
       <varlistentry>
         <term>Synopsis:</term>
         <listitem>
           <para><emphasis role="bold">include</emphasis> <emphasis role="bold">alias</emphasis> &qstring;</para>
         </listitem>
       </varlistentry>
       <varlistentry>
         <term>Action:</term>
         <listitem>
           <para>Every 
            <link linkend="interpretation">interpretation</link>
            declared in the file <command>s</command> is re-declared
            so to make it the preferred choice for disambiguation.
          </para>
         </listitem>
       </varlistentry>
     </variablelist>
   </para>
 </sect1>
 <!--
 <sect1 id="command_include_first">
   <title>include' &quot;s&quot;</title>
   <para><userinput></userinput></para>
   <para>
     <variablelist>
       <varlistentry>
         <term>Synopsis:</term>
         <listitem>
           <para><emphasis role="bold">include'</emphasis> &qstring;</para>
         </listitem>
       </varlistentry>
       <varlistentry>
         <term>Action:</term>
         <listitem>
           <para>Not documented (&TODO;), do not use it.</para>
         </listitem>
       </varlistentry>
     </variablelist>
   </para>
 </sect1>
 -->
 <!--
 <sect1 id="command_whelp">
   <title>whelp</title>
   <para><userinput>whelp locate &quot;s&quot;</userinput></para>
   <para><userinput>whelp hint t</userinput></para>
   <para><userinput>whelp elim t</userinput></para>
   <para><userinput>whelp match t</userinput></para>
   <para><userinput>whelp instance t</userinput></para>
   <para>
     <variablelist>
       <varlistentry>
         <term>Synopsis:</term>
         <listitem>
           <para><emphasis role="bold">whelp</emphasis>
            [<emphasis role="bold">locate</emphasis> &qstring;
            | <emphasis role="bold">hint</emphasis> &term;
            | <emphasis role="bold">elim</emphasis> &term;
            | <emphasis role="bold">match</emphasis> &term;
            | <emphasis role="bold">instance</emphasis> &term;
            ]
           </para>
         </listitem>
       </varlistentry>
       <varlistentry>
         <term>Action:</term>
         <listitem>
           <para>Performs the corresponding <link linkend="whelp">query</link>,
            showing the result in the CIC browser. The command is removed
            from the script.
           </para>
         </listitem>
       </varlistentry>
     </variablelist>
   </para>
 </sect1>
 -->
 <sect1 id="command_qed">
   <title>qed</title>
   <para><userinput>qed</userinput></para>
   <para>
     <variablelist>
       <varlistentry>
         <term>Synopsis:</term>
         <listitem>
           <para><emphasis role="bold">qed</emphasis>
           </para>
         </listitem>
       </varlistentry>
       <varlistentry>
         <term>Action:</term>
         <listitem>
           <para>Saves and indexes the current interactive theorem or
            definition.
            In order to do this, the set of sequents still to be proved
            must be empty.</para>
         </listitem>
       </varlistentry>
     </variablelist>
   </para>
 </sect1>
 <sect1 id="command_qed_minus">
   <title>qed-</title>
   <para><userinput>qed-</userinput></para>
   <para>
     <variablelist>
       <varlistentry>
         <term>Synopsis:</term>
         <listitem>
           <para><emphasis role="bold">qed-</emphasis>
           </para>
         </listitem>
       </varlistentry>
       <varlistentry>
         <term>Action:</term>
         <listitem>
           <para>Saves the current interactive theorem or
            definition without indexing. Therefore automation will ignore
            it.
            In order to do this, the set of sequents still to be proved
            must be empty.</para>
         </listitem>
       </varlistentry>
     </variablelist>
   </para>
 </sect1>
 <sect1 id="command_unification_hint">
   <title>unification hint</title>
   <para><userinput>unification hint n ≔ v1 : T1,… vi : Ti; h1 ≟ t1, …  hn ≟ tn ⊢ tl ≡ tr.</userinput></para>
   <para>
     <variablelist>
       <varlistentry>
         <term>Synopsis:</term>
         <listitem>
		 <para>
			 <emphasis role="bold">unification hint</emphasis> 
			 &nat;
			 <emphasis role="bold">≔</emphasis>
			 [ &id; [ <emphasis role="bold">:</emphasis> &term; ] ,.. ]
			 <emphasis role="bold">;</emphasis>
			 [ &id; <emphasis role="bold">≟</emphasis> &term; ,.. ]
			 <emphasis role="bold">⊢</emphasis>
			 &term; <emphasis role="bold">≡</emphasis> &term;
		 </para>
         </listitem>
       </varlistentry>
       <varlistentry>
         <term>Action:</term>
         <listitem>
		 <para>Declares the hint at precedence <command>n</command></para>
		 <para>The file <command>hints_declaration.ma</command> must be
			 included to declare hints with that syntax.</para>
		 <para>Unification hints are described in the paper
			 &quot;Hints in unification&quot; by
			 Asperti, Ricciotti, Sacerdoti and Tassi.
		 </para>
         </listitem>
       </varlistentry>
     </variablelist>
   </para>
   -->
 </sect1>
 <sect1 id="command_universe_constraints">
   <title>universe constraint</title>
   <para>TODO</para>
   <!--
   <para><userinput>coercion u with ariety saturation nocomposites</userinput></para>
   <para>
     <variablelist>
       <varlistentry>
         <term>Synopsis:</term>
         <listitem>
		 <para>
			 <emphasis role="bold">coercion</emphasis> 
			 (&uri; | &term; <emphasis role="bold">with</emphasis>)
			 [ &nat; [&nat;]] 
			 [ <emphasis role="bold">nocomposites</emphasis> ]
		 </para>
         </listitem>
       </varlistentry>
       <varlistentry>
         <term>Action:</term>
         <listitem>
		 <para>Declares <command>u</command> as an implicit coercion.
		 If the type of <command>u</command> is 	
		 <command>∀x1:T1. … ∀x(n-1):T(n-1).Tn</command> the coercion target is
		 <command>T(n - ariety)</command> while its source is 
		 <command>T(n - ariety - saturation - 1)</command>.
	    Every time a term <command>x</command>
            of type source is used with expected type target, Matita
            automatically replaces <command>x</command> with
            <command>(u ? … ? x ? … ?)</command> to avoid a typing error.</para>
            Note that the number of <command>?</command> added after 
	    <command>x</command> is saturation.
           <para>Implicit coercions are not displayed to the user:
            <command>(u ? … ? x)</command> is rendered simply
            as <command>x</command>.</para>
           <para>When a coercion <command>u</command> is declared
            from source <command>s</command> to target <command>t</command>
            and there is already a coercion <command>u'</command> of
            target <command>s</command> or source <command>t</command>,
            a composite implicit coercion is automatically computed
	    by Matita unless <emphasis role="bold">nocomposites</emphasis> 
	    is specified.</para>
         </listitem>
       </varlistentry>
     </variablelist>
   </para>
   -->
 </sect1>
 
 <!--
 <sect1 id="command_inline">
   <title>inline</title>
   <para><userinput>inline &quot;s&quot; params</userinput></para>
   <para>
     <variablelist>
       <varlistentry>
         <term>Synopsis:</term>
         <listitem>
           <para>
	     <emphasis role="bold">inline</emphasis> &qstring; &inlineparams;
           </para>
         </listitem>
       </varlistentry>
       <varlistentry>
         <term>Action:</term>
         <listitem>
           <para>Inlines a representation of the item <command>s</command>,
which can be the URI of a HELM object. If an entire HELM directory (i.e. a base
URI) or the path of a *.ma source file is provided, all the contained objects
are represented in a row.
If the inlined object has a proof, this proof is represented in several ways
depending on the provided parameters.</para>
         </listitem>
       </varlistentry>
     </variablelist>
   </para>
   
    <sect2 id="inline-params">
    <title>inline-params</title>
    <table frame="topbot" rowsep="0" colsep="0" role="grammar">
      <title>inline-params</title>
      <tgroup cols="4">
      <tbody>
       <row>
	<entry id="grammar.inlineparams">&inlineparams;</entry>
	<entry>::=</entry>
        <entry>[&inlineparam; [&inlineparam;] … ]</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
    <table frame="topbot" rowsep="0" colsep="0" role="grammar">
      <title>inline-param</title>
      <tgroup cols="4">
      <tbody>
       
       <row>
	<entry id="grammar.inlineparam">&inlineparam;</entry>
	<entry>::=</entry>
	<entry><emphasis role="bold">axiom</emphasis></entry>
        <entry>Try to give an <link linkend="axiom">axiom</link> flavour
           (bodies are omitted even if present) 
	</entry>
       </row>

       <row>
        <entry/>
        <entry>|</entry>	
	<entry><emphasis role="bold"> definition</emphasis></entry>
        <entry>Try give a <link linkend="definition">definition</link> flavour
	</entry>
       </row>

       <row>
        <entry/>
        <entry>|</entry>	
	<entry><emphasis role="bold">theorem</emphasis></entry>
        <entry>Try give a <link linkend="theorem">theorem</link> flavour
	</entry>
       </row>

       <row>
        <entry/>
        <entry>|</entry>	
	<entry><emphasis role="bold">lemma</emphasis></entry>
        <entry>Try give a <link linkend="lemma">lemma</link> flavour
	</entry>
       </row>

       <row>
        <entry/>
        <entry>|</entry>	
	<entry><emphasis role="bold">remark</emphasis></entry>
        <entry>Try give a <link linkend="remark">remark</link> flavour
	</entry>
       </row>

       <row>
        <entry/>
        <entry>|</entry>	
	<entry><emphasis role="bold">fact</emphasis></entry>
        <entry>Try give a <link linkend="fact">fact</link> flavour
	</entry>
       </row>

       <row>
        <entry/>
        <entry>|</entry>	
	<entry><emphasis role="bold">variant</emphasis></entry>
        <entry>Try give a <link linkend="variant">variant</link> flavour
	       (implies <emphasis role="bold">plain</emphasis>)
	</entry>
       </row>

       <row>
        <entry/>
        <entry>|</entry>	
	<entry><emphasis role="bold">declarative</emphasis></entry>
        <entry>Represent proofs using 
           <link linkend="sec_declarative_tactics">declarative tactics</link>
	   (this is the dafault and can be omitted)
	</entry>
       </row>
       
       <row>
        <entry/>
        <entry>|</entry>
        <entry><emphasis role="bold">procedural</emphasis></entry>
        <entry>Represent proofs using 
           <link linkend="sec_tactics">procedural tactics</link>
       	</entry>
       </row>
       
       <row>
        <entry/>
        <entry>|</entry>
        <entry><emphasis role="bold">plain</emphasis></entry>
        <entry>Represent proofs using plain 
	   <link linkend="tbl_terms">proof terms</link>
	</entry>
       </row>

       <row>
        <entry/>
        <entry>|</entry>
	<entry><emphasis role="bold">nodefaults</emphasis></entry>
        <entry>
	 Do not use the tactics depending on the
	 <link linkend="command_default">default</link> command
	   (<link linkend="tac_rewrite">rewrite</link>
	    in the <emphasis role="bold">procedural</emphasis> mode)
	</entry>
       </row>

       <row valign="top">
        <entry/>
        <entry>|</entry>
	<entry><emphasis role="bold">level=&nat;</emphasis></entry>
        <entry>
	 Set the level of the procedural proof representation
	 (the default is the highest level)
         <itemizedlist>
          <listitem>
	   Tactics used at level 1:
	    <link linkend="tac_exact">exact</link>
	  </listitem>
          <listitem>
	   Additional tactics used at level 2:
	    <link linkend="tac_letin">letin</link>,
	    <link linkend="tac_cut">cut</link>,
	    <link linkend="tac_change">change</link>,
	    <link linkend="tac_intros">intros</link>,
	    <link linkend="tac_apply">apply</link>,
	    <link linkend="tac_elim">elim</link>,
	    <link linkend="tac_cases">cases</link>,
	    <link linkend="tac_rewrite">rewrite</link>
          </listitem>
         </itemizedlist>
	</entry>
       </row>

       <row>
        <entry/>
        <entry>|</entry>
	<entry><emphasis role="bold">depth=&nat;</emphasis></entry>
        <entry>&TODO;</entry>
       </row>
      
      </tbody>
     </tgroup>
    </table>
    </sect2>   
 </sect1>
 -->
</chapter>
