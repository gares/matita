(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "arithmetics/nat.ma".

naxiom Q: Type[0].
naxiom nat_to_Q: nat ‚Üí Q.
ncoercion nat_to_Q : ‚àÄx:nat.Q ‚âù nat_to_Q on _x:nat to Q.
ndefinition bool_to_nat ‚âù Œªb. match b with [ true ‚áí 1 | false ‚áí 0 ].
ncoercion bool_to_nat : ‚àÄb:bool.nat ‚âù bool_to_nat on _b:bool to nat.
naxiom Qplus: Q ‚Üí Q ‚Üí Q.
naxiom Qminus: Q ‚Üí Q ‚Üí Q.
naxiom Qtimes: Q ‚Üí Q ‚Üí Q.
naxiom Qdivides: Q ‚Üí Q ‚Üí Q.
naxiom Qle : Q ‚Üí Q ‚Üí Prop.
naxiom Qlt: Q ‚Üí Q ‚Üí Prop.
naxiom Qmin: Q ‚Üí Q ‚Üí Q.
naxiom Qmax: Q ‚Üí Q ‚Üí Q.
interpretation "Q plus" 'plus x y = (Qplus x y).
interpretation "Q minus" 'minus x y = (Qminus x y).
interpretation "Q times" 'times x y = (Qtimes x y).
interpretation "Q divides" 'divide x y = (Qdivides x y).
interpretation "Q le" 'leq x y = (Qle x y).
interpretation "Q lt" 'lt x y = (Qlt x y).
naxiom Qtimes_plus: ‚àÄn,m:nat.‚àÄq:Q. (n * q + m * q) = (plus n m) * q.
naxiom Qmult_one: ‚àÄq:Q. 1 * q = q.
naxiom Qdivides_mult: ‚àÄq1,q2. (q1 * q2) / q1 = q2.
naxiom Qtimes_distr: ‚àÄq1,q2,q3:Q.(q3 * q1 + q3 * q2) = q3 * (q1 + q2).
naxiom Qdivides_distr: ‚àÄq1,q2,q3:Q.(q1 / q3 + q2 / q3) = (q1 + q2) / q3.
naxiom Qplus_comm: ‚àÄq1,q2. q1 + q2 = q2 + q1.
naxiom Qplus_assoc: ‚àÄq1,q2,q3. q1 + q2 + q3 = q1 + (q2 + q3).
ntheorem Qplus_assoc1: ‚àÄq1,q2,q3. q1 + q2 + q3 = q3 + q2 + q1.
#a; #b; #c; //; nqed.
naxiom Qle_refl: ‚àÄq1. q1‚â§q1.
naxiom Qle_trans: ‚àÄx,y,z. x‚â§y ‚Üí y‚â§z ‚Üí x‚â§z.
naxiom Qlt_trans: ‚àÄx,y,z. x < y ‚Üí y < z ‚Üí x < z.
naxiom Qle_lt_trans1: ‚àÄx,y,z. x ‚â§ y ‚Üí y < z ‚Üí x < z.
naxiom Qle_lt_trans2: ‚àÄx,y,z. x < y ‚Üí y ‚â§ z ‚Üí x < z.
naxiom Qle_plus_compat: ‚àÄx,y,z,t. x‚â§y ‚Üí z‚â§t ‚Üí x+z ‚â§ y+t.
naxiom Qmult_zero: ‚àÄq:Q. 0 * q = 0.

naxiom phi: Q. (* the golden number *)
naxiom golden: phi = phi * phi + phi * phi * phi.

(* naxiom Ndivides_mult: ‚àÄn:nat.‚àÄq. (n * q) / n = q. *)

ntheorem lem1: ‚àÄn:nat.‚àÄq:Q. (n * q + q) = (S n) * q.
#n; #q; ncut (plus n 1 = S n);##[//##]
//; nqed.

ntheorem Qplus_zero: ‚àÄq:Q. 0 + q = q. //. nqed.

ncoinductive locate : Q ‚Üí Q ‚Üí Prop ‚âù
   L: ‚àÄl,u. locate l ((1 - phi) * l + phi * u) ‚Üí locate l u
 | H: ‚àÄl,u. locate (phi * l + (1 - phi) * u) u ‚Üí locate l u.

ndefinition locate_inv_ind':
 ‚àÄl,u:Q.‚àÄP:Q ‚Üí Q ‚Üí Prop.
  ‚àÄH1: locate l ((1 - phi) * l + phi * u) ‚Üí P l u. 
  ‚àÄH2: locate (phi * l + (1 - phi) * u) u ‚Üí P l u.
   locate l u ‚Üí P l u.
 #l; #u; #P; #H1; #H2; #p; ninversion p; #l; #u; #H; #E1; #E2;
 ndestruct; /2/.
nqed.

ndefinition R ‚âù ‚àÉl,u:Q. locate l u.

(*
nlet corec Q_to_locate q : locate q q ‚âù L q q ‚Ä¶ (Q_to_locate q).
  //; nrewrite < (Qdivides_mult 3 q) in ‚ä¢ (? % ?); //.
nqed.

ndefinition Q_to_R : Q ‚Üí R.
 #q; @ q; @q; //.
nqed.
*)

nlemma help_auto1: ‚àÄq:Q. false * q = 0. #q; nnormalize; //. nqed.

(*
nlet corec locate_add (l,u:?) (r1,r2: locate l u) (c1,c2:bool) :
 locate (l + l + c1 * phi + c2 * phi * phi) (u + u + c1 * phi + c2 * phi * phi) ‚âù ?.
 napply (locate_inv_ind' ‚Ä¶ r1); napply (locate_inv_ind' ‚Ä¶ r2);
 #r2'; #r1'; ncases c1; ncases c2
  [ ##4: nnormalize; @1;
    nlapply (locate_add ‚Ä¶ r1' r2' false false); nnormalize;
    nrewrite > (Qmult_zero ‚Ä¶); nrewrite > (Qmult_zero ‚Ä¶); #K; nauto demod;
     #K;
    nnormalize in K; nrewrite > (Qmult_zero ‚Ä¶) in K; nnormalize; #K;
    napplyS K;
     


 
  [ ##1,4: ##[ @1 ? (l1'+l2') (u1'+u2') | @2 ? (l1'+l2') (u1'+u2') ]
    ##[ ##1,5: /2/ | napplyS (Qle_plus_compat ‚Ä¶leq1u leq2u) |
        ##4: napplyS (Qle_plus_compat ‚Ä¶leq1l leq2l)
      |##*: /2/ ]
 ##| ninversion r2; #l2''; #u2''; #leq2l'; #leq2u'; #r2';
     ninversion r1; #l1''; #u1''; #leq1l'; #leq1u'; #r1';
      ##[ @1 ? (l1''+l2'') (u1''+u2''); 
      ##[ napply Qle_plus_compat; /3/;
        ##| ##3: /2/;
        ##| napplyS (Qle_plus_compat ‚Ä¶leq1u' leq2u');

(*
nlet corec locate_add (l1,u1:?) (r1: locate l1 u1) (l2,u2:?) (r2: locate l2 u2) :
 locate (l1 + l2) (u1 + u2) ‚âù ?.
 napply (locate_inv_ind' ‚Ä¶ r1); napply (locate_inv_ind' ‚Ä¶ r2); #l2'; #u2'; #leq2l; #leq2u; #r2;
 #l1'; #u1'; #leq1l; #leq1u; #r1
  [ ##1,4: ##[ @1 ? (l1'+l2') (u1'+u2') | @2 ? (l1'+l2') (u1'+u2') ]
    ##[ ##1,5: /2/ | napplyS (Qle_plus_compat ‚Ä¶leq1u leq2u) |
        ##4: napplyS (Qle_plus_compat ‚Ä¶leq1l leq2l)
      |##*: /2/ ]
 ##| ninversion r2; #l2''; #u2''; #leq2l'; #leq2u'; #r2';
     ninversion r1; #l1''; #u1''; #leq1l'; #leq1u'; #r1';
      ##[ @1 ? (l1''+l2'') (u1''+u2''); 
      ##[ napply Qle_plus_compat; /3/;
        ##| ##3: /2/;
        ##| napplyS (Qle_plus_compat ‚Ä¶leq1u' leq2u');
      .
 
nlet corec apart (l1,u1) (r1: locate l1 u1) (l2,u2) (r2: locate l2 u2) : CProp[0] ‚âù
 match disjoint l1 u1 l2 u2 with
  [ true ‚áí True
  | false ‚áí 
*)
*)

include "topology/igft.ma".
include "datatypes/pairs.ma".
include "datatypes/sums.ma".

nrecord pre_order (A: Type[0]) : Type[1] ‚âù
 { pre_r :2> A ‚Üí A ‚Üí CProp[0];
   pre_refl: reflexive ‚Ä¶ pre_r;
   pre_trans: transitive ‚Ä¶ pre_r
 }.

nrecord Ax_pro : Type[1] ‚âù
 { AAx :> Ax;
   Aleq: pre_order AAx
 }.

interpretation "Ax_pro leq" 'leq x y = (pre_r ? (Aleq ?) x y).

(*CSC: per auto per sotto, ma non sembra aiutare *)
nlemma And_elim1: ‚àÄA,B. A ‚àß B ‚Üí A.
 #A; #B; *; //.
nqed.

nlemma And_elim2: ‚àÄA,B. A ‚àß B ‚Üí B.
 #A; #B; *; //.
nqed.
(*CSC: /fine per auto per sotto *)

ndefinition Rax : Ax_pro.
 @
  [ @ (Q √ó Q)
    [ #p; napply (unit + sigma ‚Ä¶ (Œªc. fst ‚Ä¶ p < fst ‚Ä¶ c ‚àß fst ‚Ä¶ c < snd ‚Ä¶ c ‚àß snd ‚Ä¶ c < snd ‚Ä¶ p))
    | #c; *
      [ #_; napply {c' | fst ‚Ä¶ c < fst ‚Ä¶ c' ‚àß snd ‚Ä¶ c' < snd ‚Ä¶ c}
      | *; #c'; #_; napply {d' | fst ‚Ä¶ d' = fst ‚Ä¶ c  ‚àß snd ‚Ä¶ d' = fst ‚Ä¶ c'
                               ‚à® fst ‚Ä¶ d' = snd ‚Ä¶ c' ‚àß snd ‚Ä¶ d' = snd ‚Ä¶ c } ]##]
##| @ (Œªc,d. fst ‚Ä¶ d ‚â§ fst ‚Ä¶ c ‚àß snd ‚Ä¶ c ‚â§ snd ‚Ä¶ d)
     [ /2/
     | nnormalize; #z; #x; #y; *; #H1; #H2; *; /3/; (*CSC: perche' non va? *) ##]
nqed.

ndefinition downarrow: ‚àÄS:Ax_pro. Œ© \sup S ‚Üí Œ© \sup S ‚âù
 ŒªS:Ax_pro.ŒªU:Œ© ^S.{a | ‚àÉb:S. b ‚àà U ‚àß a ‚â§ b}.

interpretation "downarrow" 'downarrow a = (downarrow ? a).

ndefinition fintersects: ‚àÄS:Ax_pro. Œ© \sup S ‚Üí Œ© \sup S ‚Üí Œ© \sup S ‚âù
 ŒªS.ŒªU,V. ‚ÜìU ‚à© ‚ÜìV.

interpretation "fintersects" 'fintersects U V = (fintersects ? U V).

ndefinition singleton ‚âù ŒªA.Œªa:A.{b | b=a}.

interpretation "singleton" 'singl a = (singleton ? a).

ninductive ftcover (A : Ax_pro) (U : Œ©^A) : A ‚Üí CProp[0] ‚âù
| ftreflexivity : ‚àÄa. a ‚àà U ‚Üí ftcover A U a
| ftleqinfinity : ‚àÄa,b. a ‚â§ b ‚Üí ‚àÄi. (‚àÄx. x ‚àà ùêÇ b i ‚Üì (singleton ‚Ä¶ a) ‚Üí ftcover A U x) ‚Üí ftcover A U a
| ftleqleft     : ‚àÄa,b. a ‚â§ b ‚Üí ftcover A U b ‚Üí ftcover A U a.

interpretation "ftcovers" 'covers a U = (ftcover ? U a).

ntheorem ftinfinity: ‚àÄA: Ax_pro. ‚àÄU: Œ©^A. ‚àÄa. ‚àÄi. (‚àÄx. x ‚àà ùêÇ a i ‚Üí x ‚óÉ U) ‚Üí a ‚óÉ U.
 #A; #U; #a; #i; #H;
 napply (ftleqinfinity ‚Ä¶ a ‚Ä¶ i); //;
 #b; *; *; #b; *; #H1; #H2; #H3; napply (ftleqleft ‚Ä¶ b); //;
 napply H; napply H1 (*CSC: auto non va! *).
nqed.

ncoinductive ftfish (A : Ax_pro) (F : Œ©^A) : A ‚Üí CProp[0] ‚âù
| ftfish : ‚àÄa.
    a ‚àà F ‚Üí
    (‚àÄb. a ‚â§ b ‚Üí ftfish A F b) ‚Üí
    (‚àÄb. a ‚â§ b ‚Üí ‚àÄi:ùêà b. ‚àÉx.  x ‚àà ùêÇ b i ‚Üì (singleton ‚Ä¶ a) ‚àß ftfish A F x) ‚Üí
    ftfish A F a.

interpretation "fish" 'fish a U = (ftfish ? U a).

nlemma ftcoreflexivity: ‚àÄA: Ax_pro.‚àÄF.‚àÄa:A. a ‚ãâ F ‚Üí a ‚àà F.
 #A; #F; #a; #H; ncases H; //.
nqed.

nlemma ftcoleqinfinity:
 ‚àÄA: Ax_pro.‚àÄF.‚àÄa:A. a ‚ãâ F ‚Üí
  ‚àÄb. (a ‚â§ b ‚Üí ‚àÄi. (‚àÉx. x ‚àà ùêÇ b i ‚Üì (singleton ‚Ä¶ a) ‚àß x ‚ãâ F)).
 #A; #F; #a; #H; ncases H; /2/.
nqed.

nlemma ftcoleqleft:
 ‚àÄA: Ax_pro.‚àÄF.‚àÄa:A. a ‚ãâ F ‚Üí
  (‚àÄb. a ‚â§ b ‚Üí b ‚ãâ F).
 #A; #F; #a; #H; ncases H; /2/.
nqed.

alias symbol "I" (instance 7) = "I".
alias symbol "I" (instance 18) = "I".
alias symbol "I" (instance 18) = "I".
alias symbol "I" (instance 18) = "I".
nlet corec ftfish_coind
 (A: Ax_pro) (F: Œ©^A) (P: A ‚Üí CProp[0])
 (Hcorefl: ‚àÄa. P a ‚Üí a ‚àà F)
 (Hcoleqleft: ‚àÄa. P a ‚Üí ‚àÄb. a ‚â§ b ‚Üí P b)
 (Hcoleqinfinity: ‚àÄa. P a ‚Üí ‚àÄb. a ‚â§ b ‚Üí ‚àÄi:ùêà b. ‚àÉx. x ‚àà ùêÇ b i ‚Üì (singleton ‚Ä¶ a) ‚àß P x)
: ‚àÄa:A. P a ‚Üí a ‚ãâ F ‚âù ?.
 #a; #H; @
  [ /2/
  | #b; #H; napply (ftfish_coind ‚Ä¶ Hcorefl Hcoleqleft Hcoleqinfinity); /2/
  | #b; #H1; #i; ncases (Hcoleqinfinity a H ? H1 i); #x; *; #H2; #H3;
    @ x; @; //; napply (ftfish_coind ‚Ä¶ Hcorefl Hcoleqleft Hcoleqinfinity); //]
nqed.

(*CSC: non serve manco questo (vedi sotto) *)
nlemma auto_hint3: ‚àÄA. S__o__AAx A = S (AAx A).
 #A; //.
nqed.

alias symbol "I" (instance 6) = "I".
ntheorem ftcoinfinity: ‚àÄA: Ax_pro. ‚àÄF: Œ©^A. ‚àÄa. a ‚ãâ F ‚Üí (‚àÄi: ùêà a. ‚àÉb. b ‚àà ùêÇ a i ‚àß b ‚ãâ F).
 #A; #F; #a; #H; #i; nlapply (ftcoleqinfinity ‚Ä¶ F ‚Ä¶ a ‚Ä¶ i); //; #H;
 ncases H; #c; *; *; *; #b; *; #H1; #H2; #H3; #H4; @ b; @ [ napply H1 (*CSC: auto non va *)]
 napply (ftcoleqleft ‚Ä¶ c); //.
nqed.

nrecord Pt (A: Ax_pro) : Type[1] ‚âù
 { pt_set: Œ©^A;
   pt_inhabited: ‚àÉa. a ‚àà pt_set;
   pt_filtering: ‚àÄa,b. a ‚àà pt_set ‚Üí b ‚àà pt_set ‚Üí ‚àÉc. c ‚àà (singleton ‚Ä¶ a) ‚Üì (singleton ‚Ä¶ b) ‚Üí c ‚àà pt_set;
   pt_closed: pt_set ‚äÜ {b | b ‚ãâ pt_set}   
 }.

ndefinition Rd ‚âù Pt Rax.

naxiom daemon: False.

ndefinition Q_to_R: Q ‚Üí Rd.
 #q; @
  [ napply { c | fst ‚Ä¶ c < q ‚àß q < snd ‚Ä¶ c  }
  | @ [ @ (Qminus q 1) (Qplus q 1) | ncases daemon ]
##| #c; #d; #Hc; #Hd; @ [ @ (Qmin (fst ‚Ä¶ c) (fst ‚Ä¶ d)) (Qmax (snd ‚Ä¶ c) (snd ‚Ä¶ d)) | ncases daemon]
##| #a; #H; napply (ftfish_coind Rax ? (Œªa. fst ‚Ä¶ a < q ‚àß q < snd ‚Ä¶ a)); /2/
    [ /5/ | #b; *; #H1; #H2; #c; *; #H3; #H4; #i; ncases i
      [ #w; nnormalize;
    ##| nnormalize;
  ]
nqed.

