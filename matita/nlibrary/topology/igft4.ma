(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "arithmetics/nat.ma".
include "datatypes/bool.ma".

ndefinition two ‚âù S (S O).
ndefinition natone ‚âù S O.
ndefinition four ‚âù two * two.
ndefinition eight ‚âù two * four.
ndefinition natS ‚âù S.

include "topology/igft.ma".

nlemma hint_auto2 : ‚àÄT.‚àÄU,V:Œ©^T.(‚àÄx.x ‚àà U ‚Üí x ‚àà V) ‚Üí U ‚äÜ V./2/.nqed.

ninductive Sigma (A: Type[0]) (P: A ‚Üí CProp[0]) : Type[0] ‚âù
 mk_Sigma: ‚àÄa:A. P a ‚Üí Sigma A P.

(*<< To be moved in igft.ma *)
ninductive ncover (A : nAx) (U : Œ©^A) : A ‚Üí CProp[0] ‚âù
| ncreflexivity : ‚àÄa. a ‚àà U ‚Üí ncover A U a
| ncinfinity    : ‚àÄa. ‚àÄi. (‚àÄy.Sigma ? (Œªj.y = ùêù a i j) ‚Üí ncover A U y) ‚Üí ncover A U a.

interpretation "ncovers" 'covers a U = (ncover ? U a).

ntheorem ncover_cover_ok: ‚àÄA:nAx.‚àÄU.‚àÄa:A. a ‚óÉ U ‚Üí cover (Ax_of_nAx A) U a.
 #A; #U; #a; #H; nelim H
  [ #n; #H1; @1; nassumption
  | #a; #i; #IH; #H; @2 [ napply i ]
    nnormalize; #y; *; #j; #E; nrewrite > E;
    napply H;
    /2/ ]
nqed.

ntheorem cover_ncover_ok: ‚àÄA:Ax.‚àÄU.‚àÄa:A. a ‚óÉ U ‚Üí ncover (nAx_of_Ax A) U a.
 #A; #U; #a; #H; nelim H
  [ #n; #H1; @1; nassumption
  | #a; #i; #IH; #H; @2 [ napply i ] #y; *; #j; #E; nrewrite > E; ncases j; #x; #K;
    napply H; nnormalize; //.
nqed.

ndefinition ncoverage : ‚àÄA:nAx.‚àÄU:Œ©^A.Œ©^A ‚âù ŒªA,U.{ a | a ‚óÉ U }.

interpretation "ncoverage cover" 'coverage U = (ncoverage ? U).

(*>> To be moved in igft.ma *)

(*XXX
nlemma ncover_ind':
 ‚àÄA:nAx.‚àÄU,P:Œ©^A.
   (U ‚äÜ P) ‚Üí (‚àÄa:A.‚àÄi:ùêà a.(‚àÄj. ùêù a i j ‚óÉ U) ‚Üí (‚àÄj. ùêù a i j ‚àà P) ‚Üí a ‚àà P) ‚Üí
    ‚óÉ U ‚äÜ P.
 #A; #U; #P; #refl; #infty; #a; #H; nelim H
  [ // | #b; #j; #K1; #K2; napply infty; //; ##] 
nqed.

alias symbol "covers" (instance 3) = "ncovers".
nlemma cover_ind'':
 ‚àÄA:nAx.‚àÄU:Œ©^A.‚àÄP:A ‚Üí CProp[0].
  (‚àÄa. a ‚àà U ‚Üí P a) ‚Üí (‚àÄa:A.‚àÄi:ùêà a.(‚àÄj. ùêù a i j ‚óÉ U) ‚Üí (‚àÄj. P (ùêù a i j)) ‚Üí P a) ‚Üí
   ‚àÄb. b ‚óÉ U ‚Üí P b.
 #A; #U; #P; nletin V ‚âù {x | P x}; napply (ncover_ind' ‚Ä¶ V).
nqed.
*)

(*********** from Cantor **********)
ninductive eq1 (A : Type[0]) : Type[0] ‚Üí CProp[0] ‚âù
| refl1 : eq1 A A.

notation "hvbox( a break ‚àº b)" non associative with precedence 40
for @{ 'eqT $a $b }.

interpretation "eq between types" 'eqT a b = (eq1 a b).

ninductive unit : Type[0] ‚âù one : unit.

ninductive option (A: Type[0]) : Type[0] ‚âù
   None: option A
 | Some: A ‚Üí option A
 | Twice: A ‚Üí A ‚Üí option A.

nrecord uuAx : Type[1] ‚âù {
  uuS : Type[0];
  uuC : uuS ‚Üí option uuS
}.

ndefinition uuax : uuAx ‚Üí nAx.
#A; @ (uuS A)
  [ #a; napply unit
##| #a; ncases (uuC ‚Ä¶ a); nnormalize
     [ #_; napply False
     | #_; #_; napply unit
     | #_; #_; #_; napply bool ]
##| #a; ncases (uuC ‚Ä¶ a); nnormalize
     [ #_; #H; napply (False_rect_Type1 ‚Ä¶ H)
     | #b; #_; #_; napply b
     | #b1; #b2; #_; * [ napply b1 | napply b2]##]##]
nqed.

ncoercion uuax : ‚àÄu:uuAx. nAx ‚âù uuax on _u : uuAx to nAx.

nlemma eq_rect_Type0_r':
 ‚àÄA.‚àÄa,x.‚àÄp:eq ? x a.‚àÄP: ‚àÄx:A. eq ? x a ‚Üí Type[0]. P a (refl A a) ‚Üí P x p.
 #A; #a; #x; #p; ncases p; //;
nqed.

nlemma eq_rect_Type0_r:
 ‚àÄA.‚àÄa.‚àÄP: ‚àÄx:A. eq ? x a ‚Üí Type[0]. P a (refl A a) ‚Üí ‚àÄx.‚àÄp:eq ? x a.P x p.
 #A; #a; #P; #p; #x0; #p0; napply (eq_rect_Type0_r' ??? p0); //.
nqed.

nrecord memdec (A: Type[0]) (U:Œ©^A) : Type[0] ‚âù
 { decide_mem:> A ‚Üí bool;
   decide_mem_ok: ‚àÄx. decide_mem x = true ‚Üí x ‚àà U;
   decide_mem_ko: ‚àÄx. decide_mem x = false ‚Üí ¬¨ (x ‚àà U)
 }.

(*********** end from Cantor ********)

nlemma csc_sym_eq: ‚àÄA,x,y. eq A x y ‚Üí eq A y x.
 #A; #x; #y; #H; ncases H; @1.
nqed.

nlemma csc_eq_rect_CProp0_r':
 ‚àÄA.‚àÄa,x.‚àÄp:eq ? x a.‚àÄP: ‚àÄx:A. CProp[0]. P a ‚Üí P x.
 #A; #a; #x; #p; #P; #H;
 napply (match csc_sym_eq ??? p return Œªa.Œª_.P a with [ refl ‚áí H ]).
nqed.
 
nlet rec cover_rect
 (A:uuAx) (U:Œ©^(uuax A)) (memdec: memdec ‚Ä¶ U) (P:uuax A ‚Üí Type[0])
  (refl: ‚àÄa:uuax A. a ‚àà U ‚Üí P a)
  (infty: ‚àÄa:uuax A.‚àÄi: ùêà a.(‚àÄj. ùêù a i j ‚óÉ U) ‚Üí (‚àÄj.P (ùêù a i j)) ‚Üí P a)
   (b:uuax A) (p: b ‚óÉ U) on p : P b
‚âù ?.
 nlapply (decide_mem_ok ‚Ä¶ memdec b); nlapply (decide_mem_ko ‚Ä¶ memdec b);
 ncases (decide_mem ‚Ä¶ memdec b)
  [ #_; #H; napply refl; /2/
  | #H; #_; ncut (uuC ‚Ä¶ b=uuC ‚Ä¶ b) [//] ncases (uuC ‚Ä¶ b) in ‚ä¢ (???% ‚Üí ?)
    [ #E;
      nlapply (infty b); nnormalize; nrewrite > E; nnormalize; #H2;
      napply (H2 one); #y; nelim y
  ##| #a; #E;
      ncut (a ‚óÉ U)
       [ nlapply E; nlapply (H ?); //; ncases p
          [ #x; #Hx; #K1; #_; ncases (K1 Hx)  
        ##| #x; #i; #Hx; #K1; #E2; napply Hx; ngeneralize in match i; nnormalize;
            nrewrite > E2; nnormalize; /2/ ]##]
      #Hcut;
      nlapply (infty b); nnormalize; nrewrite > E; nnormalize; #H2;
      napply (H2 one); #y
       [ napply Hcut
     ##| napply (cover_rect A U memdec P refl infty a); // ]
  ##| #a; #a1; #E;
      ncut (a ‚óÉ U)
       [ nlapply E; nlapply (H ?) [//] ncases p
          [ #x; #Hx; #K1; #_; ncases (K1 Hx)
        ##| #x; #i; #Hx; #K1; #E2; napply Hx; ngeneralize in match i; nnormalize;
            nrewrite > E2; nnormalize; #_; @1 (true); /2/ ]##]
      #Hcut;
      ncut (a1 ‚óÉ U)
       [ nlapply E; nlapply (H ?) [//] ncases p
          [ #x; #Hx; #K1; #_; ncases (K1 Hx)
        ##| #x; #i; #Hx; #K1; #E2; napply Hx; ngeneralize in match i; nnormalize;
            nrewrite > E2; nnormalize; #_; @1 (false); /2/ ]##]
      #Hcut1;
      nlapply (infty b); nnormalize; nrewrite > E; nnormalize; #H2;
      napply (H2 one); #y; ncases y; nnormalize
       [##1,2: nassumption
       | napply (cover_rect A U memdec P refl infty a); //
       | napply (cover_rect A U memdec P refl infty a1); //]
nqed.

(********* Esempio:
   let rec skip n =
     match n with
      [ O ‚áí 1
      | S m ‚áí
         match m with
          [ O ‚áí skipfact O
          | S _ ‚áí S m * skipfact (pred m) * skipfact (pred m) ]]
**)

ntheorem psym_plus: ‚àÄn,m. n + m = m + n.//.
nqed.

nlemma easy1: ‚àÄn:nat. two * (S n) = two + two * n.//.
nqed.

ndefinition skipfact_dom: uuAx.
 @ nat; #n; ncases n [ napply None | #m; ncases m [ napply (Some ‚Ä¶ O) | #_; napply (Twice ‚Ä¶ (pred m) (pred m)) ]
nqed.

ntheorem skipfact_base_dec:
 memdec (uuax skipfact_dom) (mk_powerclass ? (Œªx: uuax skipfact_dom. False)).
 nnormalize; @ (Œª_.false); //. #_; #H; ndestruct.
nqed.

ntheorem skipfact_partial:
 ‚àÄn: uuax skipfact_dom. two * n ‚óÉ mk_powerclass ? (Œªx: uuax skipfact_dom.False).
 #n; nelim n
  [ @2; nnormalize; //; #y; *; #a; ncases a
  |
 #m; nelim m; nnormalize
     [ #H; @2; nnormalize; //;
       #y; *; #a; #E; nrewrite > E; ncases a; nnormalize; //
   ##| #p; #H1; #H2; @2; nnormalize; //;
       #y; *; #a; #E; nrewrite > E; ncases a; nnormalize;
       nrewrite < (plus_n_Sm ‚Ä¶); // ]
nqed.

ndefinition skipfact: ‚àÄn:nat. n ‚óÉ mk_powerclass ? (Œªx: uuax skipfact_dom.False) ‚Üí nat.
 #n; #D; napply (cover_rect ‚Ä¶ skipfact_base_dec ‚Ä¶ n D)
  [ #a; #H; nelim H
  | #a; ncases a
    [ nnormalize; #i; #_; #_; napply natone
    | #m; ncases m
       [ nnormalize; #_; #_; #H; napply H; @1
       | #p; #i; nnormalize in i; #K;
         #H; nnormalize in H;
         napply (S m * H true * H false) ]
nqed.

nlemma test: skipfact four ? = four * two * two. ##[##2: napply (skipfact_partial two)]//.
nqed.